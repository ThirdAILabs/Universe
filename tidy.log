Enabled checks:
    abseil-duration-addition
    abseil-duration-comparison
    abseil-duration-conversion-cast
    abseil-duration-division
    abseil-duration-factory-float
    abseil-duration-factory-scale
    abseil-duration-subtraction
    abseil-duration-unnecessary-conversion
    abseil-faster-strsplit-delimiter
    abseil-no-internal-dependencies
    abseil-no-namespace
    abseil-redundant-strcat-calls
    abseil-str-cat-append
    abseil-string-find-startswith
    abseil-string-find-str-contains
    abseil-time-comparison
    abseil-time-subtraction
    abseil-upgrade-duration-conversions
    bugprone-argument-comment
    bugprone-assert-side-effect
    bugprone-bad-signal-to-kill-thread
    bugprone-bool-pointer-implicit-conversion
    bugprone-branch-clone
    bugprone-copy-constructor-init
    bugprone-dangling-handle
    bugprone-dynamic-static-initializers
    bugprone-exception-escape
    bugprone-fold-init-type
    bugprone-forward-declaration-namespace
    bugprone-forwarding-reference-overload
    bugprone-inaccurate-erase
    bugprone-incorrect-roundings
    bugprone-infinite-loop
    bugprone-integer-division
    bugprone-lambda-function-name
    bugprone-macro-parentheses
    bugprone-macro-repeated-side-effects
    bugprone-misplaced-operator-in-strlen-in-alloc
    bugprone-misplaced-pointer-arithmetic-in-alloc
    bugprone-misplaced-widening-cast
    bugprone-move-forwarding-reference
    bugprone-multiple-statement-macro
    bugprone-narrowing-conversions
    bugprone-no-escape
    bugprone-not-null-terminated-result
    bugprone-parent-virtual-call
    bugprone-posix-return
    bugprone-redundant-branch-condition
    bugprone-reserved-identifier
    bugprone-signal-handler
    bugprone-signed-char-misuse
    bugprone-sizeof-container
    bugprone-sizeof-expression
    bugprone-spuriously-wake-up-functions
    bugprone-string-constructor
    bugprone-string-integer-assignment
    bugprone-string-literal-with-embedded-nul
    bugprone-suspicious-enum-usage
    bugprone-suspicious-include
    bugprone-suspicious-memset-usage
    bugprone-suspicious-missing-comma
    bugprone-suspicious-semicolon
    bugprone-suspicious-string-compare
    bugprone-swapped-arguments
    bugprone-terminating-continue
    bugprone-throw-keyword-missing
    bugprone-too-small-loop-variable
    bugprone-undefined-memory-manipulation
    bugprone-undelegated-constructor
    bugprone-unhandled-self-assignment
    bugprone-unused-raii
    bugprone-unused-return-value
    bugprone-use-after-move
    bugprone-virtual-near-miss
    cert-con36-c
    cert-con54-cpp
    cert-dcl03-c
    cert-dcl16-c
    cert-dcl21-cpp
    cert-dcl37-c
    cert-dcl50-cpp
    cert-dcl51-cpp
    cert-dcl54-cpp
    cert-dcl58-cpp
    cert-dcl59-cpp
    cert-env33-c
    cert-err09-cpp
    cert-err34-c
    cert-err52-cpp
    cert-err58-cpp
    cert-err60-cpp
    cert-err61-cpp
    cert-fio38-c
    cert-flp30-c
    cert-mem57-cpp
    cert-msc30-c
    cert-msc32-c
    cert-msc50-cpp
    cert-msc51-cpp
    cert-oop11-cpp
    cert-oop54-cpp
    cert-oop57-cpp
    cert-oop58-cpp
    cert-pos44-c
    cert-sig30-c
    cert-str34-c
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    cppcoreguidelines-avoid-c-arrays
    cppcoreguidelines-avoid-goto
    cppcoreguidelines-avoid-non-const-global-variables
    cppcoreguidelines-c-copy-assignment-signature
    cppcoreguidelines-explicit-virtual-functions
    cppcoreguidelines-init-variables
    cppcoreguidelines-interfaces-global-init
    cppcoreguidelines-macro-usage
    cppcoreguidelines-narrowing-conversions
    cppcoreguidelines-no-malloc
    cppcoreguidelines-non-private-member-variables-in-classes
    cppcoreguidelines-pro-type-const-cast
    cppcoreguidelines-pro-type-cstyle-cast
    cppcoreguidelines-pro-type-member-init
    cppcoreguidelines-pro-type-reinterpret-cast
    cppcoreguidelines-pro-type-static-cast-downcast
    cppcoreguidelines-pro-type-union-access
    cppcoreguidelines-pro-type-vararg
    cppcoreguidelines-slicing
    cppcoreguidelines-special-member-functions
    misc-definitions-in-headers
    misc-misplaced-const
    misc-new-delete-overloads
    misc-no-recursion
    misc-non-copyable-objects
    misc-non-private-member-variables-in-classes
    misc-redundant-expression
    misc-static-assert
    misc-throw-by-value-catch-by-reference
    misc-unconventional-assign-operator
    misc-uniqueptr-reset-release
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-using-decls
    modernize-avoid-bind
    modernize-concat-nested-namespaces
    modernize-deprecated-headers
    modernize-deprecated-ios-base-aliases
    modernize-make-shared
    modernize-make-unique
    modernize-pass-by-value
    modernize-raw-string-literal
    modernize-redundant-void-arg
    modernize-replace-auto-ptr
    modernize-replace-disallow-copy-and-assign-macro
    modernize-replace-random-shuffle
    modernize-return-braced-init-list
    modernize-shrink-to-fit
    modernize-unary-static-assert
    modernize-use-auto
    modernize-use-bool-literals
    modernize-use-default-member-init
    modernize-use-emplace
    modernize-use-equals-default
    modernize-use-equals-delete
    modernize-use-nodiscard
    modernize-use-noexcept
    modernize-use-nullptr
    modernize-use-override
    modernize-use-transparent-functors
    modernize-use-uncaught-exceptions
    modernize-use-using
    openmp-exception-escape
    openmp-use-default-none
    performance-faster-string-find
    performance-for-range-copy
    performance-implicit-conversion-in-loop
    performance-inefficient-algorithm
    performance-inefficient-string-concatenation
    performance-inefficient-vector-operation
    performance-move-const-arg
    performance-move-constructor-init
    performance-no-automatic-move
    performance-no-int-to-ptr
    performance-noexcept-move-constructor
    performance-trivially-destructible
    performance-type-promotion-in-math-fn
    performance-unnecessary-copy-initialization
    performance-unnecessary-value-param
    readability-avoid-const-params-in-decls
    readability-braces-around-statements
    readability-const-return-type
    readability-container-size-empty
    readability-convert-member-functions-to-static
    readability-delete-null-pointer
    readability-deleted-default
    readability-else-after-return
    readability-function-cognitive-complexity
    readability-function-size
    readability-identifier-naming
    readability-implicit-bool-conversion
    readability-inconsistent-declaration-parameter-name
    readability-isolate-declaration
    readability-make-member-function-const
    readability-misleading-indentation
    readability-misplaced-array-index
    readability-named-parameter
    readability-non-const-parameter
    readability-qualified-auto
    readability-redundant-access-specifiers
    readability-redundant-control-flow
    readability-redundant-declaration
    readability-redundant-function-ptr-dereference
    readability-redundant-member-init
    readability-redundant-preprocessor
    readability-redundant-smartptr-get
    readability-redundant-string-cstr
    readability-redundant-string-init
    readability-simplify-boolean-expr
    readability-simplify-subscript-expr
    readability-static-accessed-through-instance
    readability-static-definition-in-anonymous-namespace
    readability-string-compare
    readability-uniqueptr-delete-release
    readability-uppercase-literal-suffix
    readability-use-anyofallof

clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/examples/murmurhash/MurmurHash3.cc
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc
/Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc:11:7: warning: variable 'world_size' is not initialized [cppcoreguidelines-init-variables]
  int world_size;
      ^
                 = 0
/Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc:15:7: warning: variable 'world_rank' is not initialized [cppcoreguidelines-init-variables]
  int world_rank;
      ^
                 = 0
/Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc:19:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  char processor_name[MPI_MAX_PROCESSOR_NAME];
  ^
/Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc:20:7: warning: variable 'name_len' is not initialized [cppcoreguidelines-init-variables]
  int name_len;
      ^
               = 0
/Users/nmeisburger/files/Research/Universe/examples/mpi-example/mpi_hello_world.cc:24:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  printf("Hello world from processor %s, rank %d out of %d processors\n",
  ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/examples/tabulationhash/UniversalHash.cc
/Users/nmeisburger/files/Research/Universe/examples/tabulationhash/UniversalHash.cc:9:1: warning: constructor does not initialize these fields: T [cppcoreguidelines-pro-type-member-init]
UniversalHash::UniversalHash(uint32_t seed) {
^
/Users/nmeisburger/files/Research/Universe/examples/tabulationhash/UniversalHash.cc:31:46: warning: 'signed char' to 'uint32_t' (aka 'unsigned int') conversion in array subscript; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse,cert-str34-c]
    res ^= T[temp & 7][static_cast<uint32_t>(temp)];
                                             ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:22:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[0] = rand() % 26 + 65;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:22:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:23:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[1] = rand() % 26 + 65;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:23:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:24:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[2] = rand() % 26 + 65;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:24:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:26:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[3] = rand() % 10 + 48;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:26:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:27:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[4] = rand() % 10 + 48;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:27:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:28:14: warning: narrowing conversion from 'int' to signed type 'std::basic_string<char>::value_type' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    str[5] = rand() % 10 + 48;
             ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:28:14: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:33:10: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  static uint64_t int_keys[100000];
         ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:33:19: warning: variable 'int_keys' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  static uint64_t int_keys[100000];
                  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:34:10: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  static std::string str_keys[100000];
         ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:34:22: warning: variable 'str_keys' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  static std::string str_keys[100000];
                     ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:36:24: warning: variable 'universal_hash' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  static UniversalHash universal_hash;
                       ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:40:5: warning: random number generator seeded with a constant value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
    srand(seed);
    ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:62:1: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
uint64_t HashTest::int_keys[100000];
^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:62:20: warning: variable 'int_keys' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
uint64_t HashTest::int_keys[100000];
                   ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:63:1: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
std::string HashTest::str_keys[100000];
^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:63:23: warning: variable 'str_keys' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
std::string HashTest::str_keys[100000];
                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:64:25: warning: initialization of 'universal_hash' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
UniversalHash HashTest::universal_hash(time(nullptr));
                        ^
/Users/nmeisburger/files/Research/Universe/examples/test/../tabulationhash/UniversalHash.h:14:12: note: possibly throwing constructor declared here
  explicit UniversalHash(uint32_t seed);
           ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:64:25: warning: variable 'universal_hash' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
UniversalHash HashTest::universal_hash(time(nullptr));
                        ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:66:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, MurmurHashTimeTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:66:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, MurmurHashTimeTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:68:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t murmurhash_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:75:24: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                       static_cast<uint64_t>(strlen(str_keys[i].c_str())), seed,
                       ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:88:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, TabulationHashTimeTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:88:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, TabulationHashTimeTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:90:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t tabulation_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:107:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, MurmurHashStringKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:107:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, MurmurHashStringKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:109:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t murmurhash_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:110:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t res[48][32] = {0};
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:113:24: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                       static_cast<uint64_t>(strlen(str_keys[i].c_str())), seed,
                       ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:121:26: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                         static_cast<uint64_t>(strlen(str_key_flipped.c_str())),
                         ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:137:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, MurmurHashIntegerKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:137:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, MurmurHashIntegerKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:139:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t murmurhash_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:140:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t res[64][32] = {0};
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:162:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, TabulationHashStringKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:162:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, TabulationHashStringKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:164:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t tabulation_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:165:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t res[48][32] = {0};
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:188:1: warning: initialization of 'test_info_' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
TEST_F(HashTest, TabulationHashIntegerKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1548:65: note: expanded from macro 'GTEST_TEST_'
                                                    test_name)::test_info_ =  \
                                                                ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:493:3: note: possibly throwing constructor declared here
  CodeLocation(const std::string& a_file, int a_line)
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:188:1: warning: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
TEST_F(HashTest, TabulationHashIntegerKeyAvalancheTest) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/gtest.h:2366:3: note: expanded from macro 'TEST_F'
  GTEST_TEST_(test_fixture, test_name, test_fixture, \
  ^
/Users/nmeisburger/files/Research/Universe/build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h:1544:39: note: expanded from macro 'GTEST_TEST_'
    static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;     \
                                      ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:190:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t tabulation_output[2];
  ^
/Users/nmeisburger/files/Research/Universe/examples/test/hash_test.cc:191:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  uint32_t res[64][32] = {0};
  ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/bolt.cc
/Users/nmeisburger/files/Research/Universe/bolt/bolt.cc:28:12: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]
    layers.push_back(
           ^~~~~~~~~~
           emplace_back(
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:3:10: error: inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead [modernize-deprecated-headers,-warnings-as-errors]
#include <assert.h>
         ^~~~~~~~~~
         <cassert>
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:10:16: warning: class 'HashTable' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
template class HashTable<uint32_t, uint32_t>;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:26:3: warning: random number generator seeded with a constant value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
  srand(32);
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:28:30: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
    gen_rand[i] = ((uint32_t)rand()) % (i + 1);
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:106:5: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
    std::pair<Label_t, uint32_t>* pairs =
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    auto
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.h:66:3: error: function 'thirdai::bolt::HashTable::HashTable<Label_t, Hash_t>' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
  HashTable(uint64_t _num_tables, uint64_t _reservoir_size, uint64_t _range_pow,
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:13:29: note: the definition seen here
HashTable<Label_t, Hash_t>::HashTable(uint64_t _num_tables,
                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.h:66:3: note: differing parameters are named here: ('_maxRand'), in definition: ('_max_rand')
  HashTable(uint64_t _num_tables, uint64_t _reservoir_size, uint64_t _range_pow,
  ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:3:10: error: inclusion of deprecated C++ header 'math.h'; consider using 'cmath' instead [modernize-deprecated-headers,-warnings-as-errors]
#include <math.h>
         ^~~~~~~~
         <cmath>
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:14:18: warning: narrowing conversion from 'float' to 'uint64_t' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      sparse_dim(_sparsity * _dim),
                 ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:14:30: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      sparse_dim(_sparsity * _dim),
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:137:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float frac = 1.0 / label_len;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:142:69: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      errors[batch_indx][n] = (frac - activations[batch_indx][n]) / batch_size;
                                                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:144:61: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      errors[batch_indx][n] = -activations[batch_indx][n] / batch_size;
                                                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:169:30: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
      uint32_t rand_offset = rand() % dim;
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:181:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (cnt >= sparse_dim) break;
                            ^
                             {
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:186:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (cnt >= sparse_dim) break;
                            ^
                             {
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:195:15: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float B1_ = 1 - pow(B1, iter);
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:196:15: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float B2_ = 1 - pow(B2, iter);
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:234:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_tables * dim];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:290:16: warning: narrowing conversion from 'float' to 'uint64_t' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  sparse_dim = sparsity * dim;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:290:27: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  sparse_dim = sparsity * dim;
                          ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:295:10: error: no member named 'random_shuffle' in namespace 'std' [clang-diagnostic-error]
    std::random_shuffle(rand_neurons, rand_neurons + dim);
         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:300:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* weights_copy = new float[dim * prev_dim];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:307:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* biases_copy = new float[dim];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.h:50:8: error: function 'thirdai::bolt::Layer::UpdateParameters' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
  void UpdateParameters(float learning_rate, uint32_t iter, float beta1 = BETA1,
       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:193:13: note: the definition seen here
void Layer::UpdateParameters(float lr, uint32_t iter, float B1, float B2,
            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.h:50:8: note: differing parameters are named here: ('learning_rate', 'beta1', 'beta2'), in definition: ('lr', 'B1', 'B2')
  void UpdateParameters(float learning_rate, uint32_t iter, float beta1 = BETA1,
       ^                      ~~~~~~~~~~~~~                       ~~~~~
                              lr                                  B1
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:14:26: warning: random number generator seeded with a constant value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
  SeededRandomEngine() { srand(SEED); }
                         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:16:3: error: use 'using' instead of 'typedef' [modernize-use-using,-warnings-as-errors]
  typedef unsigned int result_type;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using result_type = unsigned int
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:18:15: error: method 'min' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
  result_type min() { return std::numeric_limits<result_type>::min(); }
              ^
  static 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:20:15: error: method 'max' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
  result_type max() { return std::numeric_limits<result_type>::max(); }
              ^
  static 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:22:37: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  result_type operator()() { return rand(); }
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:27:65: warning: declaration uses identifier '_K', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
DWTAHashFunction::DWTAHashFunction(uint32_t input_dim, uint32_t _K, uint32_t _L,
                                                                ^~
                                                                K
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:27:78: warning: declaration uses identifier '_L', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
DWTAHashFunction::DWTAHashFunction(uint32_t input_dim, uint32_t _K, uint32_t _L,
                                                                             ^~
                                                                             L
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:36:26: warning: narrowing conversion from 'typename std::enable_if<std::is_integral<unsigned int>::value, double>::type' (aka 'double') to 'uint32_t' (aka 'unsigned int') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  this->log_num_hashes = log2(num_hashes);
                         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:46:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* n_array = new uint32_t[dim];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:70:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* final_hashes = new uint32_t[L];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:79:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_hashes];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:80:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* bin_values = new float[num_hashes];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:108:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* final_hashes = new uint32_t[L];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:118:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_hashes];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:119:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* bin_values = new float[num_hashes];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:143:48: error: pointer parameter 'hashes' can be pointer to const [readability-non-const-parameter,-warnings-as-errors]
void DWTAHashFunction::DensifyHashes(uint32_t* hashes, uint32_t* final_hashes) {
                                               ^
                                     const 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:146:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hash_array = new uint32_t[num_hashes]();
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:158:48: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      uint32_t index = std::min(RandDoubleHash(i, count), num_hashes);
                                               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:158:51: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      uint32_t index = std::min(RandDoubleHash(i, count), num_hashes);
                                                  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:161:23: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (count > 100)  // Densification failure.
                      ^
                       {
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:136:15: error: function 'Train' has cognitive complexity of 27 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void Network::Train(uint32_t batch_size, std::string train_data,
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:143:36: note: +1, including nesting penalty of 0, nesting level increased to 1
  uint32_t rehash = rehash_in != 0 ? rehash_in : (train.NumVecs() / 100);
                                   ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:144:38: note: +1, including nesting penalty of 0, nesting level increased to 1
  uint32_t rebuild = rebuild_in != 0 ? rebuild_in : (train.NumVecs() / 4);
                                     ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:151:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (intermediate_test_batches > 0) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:153:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < intermediate_test_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:167:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (uint32_t epoch = 0; epoch < epochs; epoch++) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:170:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < num_train_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:171:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (iter % 1000 == 999) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:172:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        for (uint32_t i = 0; i < num_layers; i++) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:179:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (iter % rebuild_batch == (rebuild_batch - 1)) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:182:14: note: +1, nesting level increased to 3
      } else if (iter % rehash_batch == (rehash_batch - 1)) {
             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:186:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if ((batch % print) == (print - 1)) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:204:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (intermediate_test_batches == 0) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:210:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < intermediate_test_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:228:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (uint32_t batch = 0; batch < num_test_batches; batch++) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:136:54: error: the parameter 'train_data' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
void Network::Train(uint32_t batch_size, std::string train_data,
                                                     ^
                                         const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:137:33: error: the parameter 'test_data' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
                    std::string test_data, float learning_rate, uint32_t epochs,
                                ^
                    const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:157:37: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
              << ((double)correct / intermediate_test_vecs) << " (" << correct
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:222:37: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
              << ((double)correct / intermediate_test_vecs) << " (" << correct
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:233:41: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            << ((double)final_correct / test.NumVecs()) << " (" << final_correct
                                        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:249:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* predictions = new uint32_t[batch_size];
  ^~~~~~~~
  auto
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:15:17: error: parameter 'configs' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param,-warnings-as-errors]
      : Network(configs, input_dim) {}
                ^
                std::move( )
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:24:60: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    py::capsule free_when_done(mem, [](void* ptr) { delete (float*)ptr; });
                                                           ^
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:42:60: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    py::capsule free_when_done(mem, [](void* ptr) { delete (float*)ptr; });
                                                           ^
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:52:1: warning: 'sscanf' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
PYBIND11_MODULE(thirdai, m) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/pybind11-src/include/pybind11/detail/common.h:274:13: note: expanded from macro 'PYBIND11_MODULE'
        if (sscanf(Py_GetVersion(), "%i.%i", &major, &minor) != 2) {           \
            ^
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:52:1: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
PYBIND11_MODULE(thirdai, m) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/pybind11-src/include/pybind11/detail/common.h:274:13: note: expanded from macro 'PYBIND11_MODULE'
        if (sscanf(Py_GetVersion(), "%i.%i", &major, &minor) != 2) {           \
            ^
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:52:1: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
PYBIND11_MODULE(thirdai, m) {
^~~~~~~~~~~~~~~
/Users/nmeisburger/files/Research/Universe/build/_deps/pybind11-src/include/pybind11/detail/common.h:277:11: note: expanded from macro 'PYBIND11_MODULE'
        } else if (major != PY_MAJOR_VERSION || minor != PY_MINOR_VERSION) {   \
          ^
/Users/nmeisburger/files/Research/Universe/python_bindings/thirdai.cc:52:1: error: multiple declarations in a single statement reduces readability [readability-isolate-declaration,-warnings-as-errors]
PYBIND11_MODULE(thirdai, m) {
^
/Users/nmeisburger/files/Research/Universe/build/_deps/pybind11-src/include/pybind11/detail/common.h:273:9: note: expanded from macro 'PYBIND11_MODULE'
        int major, minor;                                                      \
        ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:14:26: warning: random number generator seeded with a constant value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
  SeededRandomEngine() { srand(SEED); }
                         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:16:3: error: use 'using' instead of 'typedef' [modernize-use-using,-warnings-as-errors]
  typedef unsigned int result_type;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using result_type = unsigned int
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:18:15: error: method 'min' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
  result_type min() { return std::numeric_limits<result_type>::min(); }
              ^
  static 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:20:15: error: method 'max' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
  result_type max() { return std::numeric_limits<result_type>::max(); }
              ^
  static 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:22:37: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  result_type operator()() { return rand(); }
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:27:65: warning: declaration uses identifier '_K', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
DWTAHashFunction::DWTAHashFunction(uint32_t input_dim, uint32_t _K, uint32_t _L,
                                                                ^~
                                                                K
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:27:78: warning: declaration uses identifier '_L', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
DWTAHashFunction::DWTAHashFunction(uint32_t input_dim, uint32_t _K, uint32_t _L,
                                                                             ^~
                                                                             L
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:36:26: warning: narrowing conversion from 'typename std::enable_if<std::is_integral<unsigned int>::value, double>::type' (aka 'double') to 'uint32_t' (aka 'unsigned int') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  this->log_num_hashes = log2(num_hashes);
                         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:46:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* n_array = new uint32_t[dim];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:70:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* final_hashes = new uint32_t[L];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:79:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_hashes];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:80:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* bin_values = new float[num_hashes];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:108:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* final_hashes = new uint32_t[L];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:118:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_hashes];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:119:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* bin_values = new float[num_hashes];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:143:48: error: pointer parameter 'hashes' can be pointer to const [readability-non-const-parameter,-warnings-as-errors]
void DWTAHashFunction::DensifyHashes(uint32_t* hashes, uint32_t* final_hashes) {
                                               ^
                                     const 
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:146:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hash_array = new uint32_t[num_hashes]();
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:158:48: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      uint32_t index = std::min(RandDoubleHash(i, count), num_hashes);
                                               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:158:51: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      uint32_t index = std::min(RandDoubleHash(i, count), num_hashes);
                                                  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DWTA.cc:161:23: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (count > 100)  // Densification failure.
                      ^
                       {
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:3:10: error: inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead [modernize-deprecated-headers,-warnings-as-errors]
#include <assert.h>
         ^~~~~~~~~~
         <cassert>
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:10:16: warning: class 'HashTable' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
template class HashTable<uint32_t, uint32_t>;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:26:3: warning: random number generator seeded with a constant value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
  srand(32);
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:28:30: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
    gen_rand[i] = ((uint32_t)rand()) % (i + 1);
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:106:5: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
    std::pair<Label_t, uint32_t>* pairs =
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    auto
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.h:66:3: error: function 'thirdai::bolt::HashTable::HashTable<Label_t, Hash_t>' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
  HashTable(uint64_t _num_tables, uint64_t _reservoir_size, uint64_t _range_pow,
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.cc:13:29: note: the definition seen here
HashTable<Label_t, Hash_t>::HashTable(uint64_t _num_tables,
                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/HashTable.h:66:3: note: differing parameters are named here: ('_maxRand'), in definition: ('_max_rand')
  HashTable(uint64_t _num_tables, uint64_t _reservoir_size, uint64_t _range_pow,
  ^
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:10:1: warning: constructor does not initialize these fields: num_vecs [cppcoreguidelines-pro-type-member-init]
SvmDataset::SvmDataset(const std::string& filename, uint64_t _batch_size)
^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:48:12: warning: variable 'pos' is not initialized [cppcoreguidelines-init-variables]
    size_t pos;
           ^
               = 0
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:49:33: error: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find,-warnings-as-errors]
    while ((pos = labelstr.find(",")) != std::string::npos) {
                                ^~~
                                ','
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:50:24: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      labels.push_back(atoi(labelstr.substr(0, pos).c_str()));
                       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:53:22: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
    labels.push_back(atoi(labelstr.c_str()));
                     ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:58:26: error: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find,-warnings-as-errors]
      pos = nonzero.find(":");
                         ^~~
                         ':'
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:59:25: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      indices.push_back(atoi(nonzero.substr(0, pos).c_str()));
                        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:60:24: warning: narrowing conversion from 'double' to 'std::vector<float>::value_type' (aka 'float') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      values.push_back(atof(nonzero.substr(pos + 1).c_str()));
                       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:60:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:3:10: error: inclusion of deprecated C++ header 'math.h'; consider using 'cmath' instead [modernize-deprecated-headers,-warnings-as-errors]
#include <math.h>
         ^~~~~~~~
         <cmath>
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:14:18: warning: narrowing conversion from 'float' to 'uint64_t' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      sparse_dim(_sparsity * _dim),
                 ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:14:30: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      sparse_dim(_sparsity * _dim),
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:137:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float frac = 1.0 / label_len;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:142:69: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      errors[batch_indx][n] = (frac - activations[batch_indx][n]) / batch_size;
                                                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:144:61: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      errors[batch_indx][n] = -activations[batch_indx][n] / batch_size;
                                                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:169:30: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
      uint32_t rand_offset = rand() % dim;
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:181:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (cnt >= sparse_dim) break;
                            ^
                             {
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:186:29: error: statement should be inside braces [readability-braces-around-statements,-warnings-as-errors]
      if (cnt >= sparse_dim) break;
                            ^
                             {
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:195:15: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float B1_ = 1 - pow(B1, iter);
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:196:15: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float B2_ = 1 - pow(B2, iter);
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:234:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* hashes = new uint32_t[num_tables * dim];
  ^~~~~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:290:16: warning: narrowing conversion from 'float' to 'uint64_t' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  sparse_dim = sparsity * dim;
               ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:290:27: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  sparse_dim = sparsity * dim;
                          ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:295:10: error: no member named 'random_shuffle' in namespace 'std' [clang-diagnostic-error]
    std::random_shuffle(rand_neurons, rand_neurons + dim);
         ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:300:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* weights_copy = new float[dim * prev_dim];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:307:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  float* biases_copy = new float[dim];
  ^~~~~
  auto
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.h:50:8: error: function 'thirdai::bolt::Layer::UpdateParameters' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
  void UpdateParameters(float learning_rate, uint32_t iter, float beta1 = BETA1,
       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.cc:193:13: note: the definition seen here
void Layer::UpdateParameters(float lr, uint32_t iter, float B1, float B2,
            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Layer.h:50:8: note: differing parameters are named here: ('learning_rate', 'beta1', 'beta2'), in definition: ('lr', 'B1', 'B2')
  void UpdateParameters(float learning_rate, uint32_t iter, float beta1 = BETA1,
       ^                      ~~~~~~~~~~~~~                       ~~~~~
                              lr                                  B1
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:10:1: warning: constructor does not initialize these fields: num_vecs [cppcoreguidelines-pro-type-member-init]
SvmDataset::SvmDataset(const std::string& filename, uint64_t _batch_size)
^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:48:12: warning: variable 'pos' is not initialized [cppcoreguidelines-init-variables]
    size_t pos;
           ^
               = 0
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:49:33: error: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find,-warnings-as-errors]
    while ((pos = labelstr.find(",")) != std::string::npos) {
                                ^~~
                                ','
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:50:24: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      labels.push_back(atoi(labelstr.substr(0, pos).c_str()));
                       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:53:22: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
    labels.push_back(atoi(labelstr.c_str()));
                     ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:58:26: error: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find,-warnings-as-errors]
      pos = nonzero.find(":");
                         ^~~
                         ':'
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:59:25: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      indices.push_back(atoi(nonzero.substr(0, pos).c_str()));
                        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:60:24: warning: narrowing conversion from 'double' to 'std::vector<float>::value_type' (aka 'float') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      values.push_back(atof(nonzero.substr(pos + 1).c_str()));
                       ^
/Users/nmeisburger/files/Research/Universe/bolt/src/DataLoader.cc:60:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:136:15: error: function 'Train' has cognitive complexity of 27 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void Network::Train(uint32_t batch_size, std::string train_data,
              ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:143:36: note: +1, including nesting penalty of 0, nesting level increased to 1
  uint32_t rehash = rehash_in != 0 ? rehash_in : (train.NumVecs() / 100);
                                   ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:144:38: note: +1, including nesting penalty of 0, nesting level increased to 1
  uint32_t rebuild = rebuild_in != 0 ? rebuild_in : (train.NumVecs() / 4);
                                     ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:151:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (intermediate_test_batches > 0) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:153:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < intermediate_test_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:167:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (uint32_t epoch = 0; epoch < epochs; epoch++) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:170:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < num_train_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:171:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (iter % 1000 == 999) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:172:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        for (uint32_t i = 0; i < num_layers; i++) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:179:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (iter % rebuild_batch == (rebuild_batch - 1)) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:182:14: note: +1, nesting level increased to 3
      } else if (iter % rehash_batch == (rehash_batch - 1)) {
             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:186:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if ((batch % print) == (print - 1)) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:204:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (intermediate_test_batches == 0) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:210:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (uint32_t batch = 0; batch < intermediate_test_batches; batch++) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:228:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (uint32_t batch = 0; batch < num_test_batches; batch++) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:136:54: error: the parameter 'train_data' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
void Network::Train(uint32_t batch_size, std::string train_data,
                                                     ^
                                         const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:137:33: error: the parameter 'test_data' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
                    std::string test_data, float learning_rate, uint32_t epochs,
                                ^
                    const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:157:37: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
              << ((double)correct / intermediate_test_vecs) << " (" << correct
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:222:37: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
              << ((double)correct / intermediate_test_vecs) << " (" << correct
                                    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:233:41: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            << ((double)final_correct / test.NumVecs()) << " (" << final_correct
                                        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Network.cc:249:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  uint32_t* predictions = new uint32_t[batch_size];
  ^~~~~~~~
  auto
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:9:10: warning: variable 'loc' is not initialized [cppcoreguidelines-init-variables]
  size_t loc;
         ^
             = 0
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:18:20: error: function 'ParseConfig' has cognitive complexity of 36 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void ConfigReader::ParseConfig(std::string filename) {
                   ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:23:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (std::getline(file, line)) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:24:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::regex_search(line, comment_re) ||
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:24:45: note: +1
    if (std::regex_search(line, comment_re) ||
                                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:30:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (!std::regex_search(line, key, key_re)) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:37:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (loc == std::string::npos) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:45:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (values.empty()) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:50:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::regex_search(values[0], string_re)) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:52:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:54:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, str_val, string_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:65:12: note: +1, nesting level increased to 2
    } else if (std::regex_search(values[0], decimal_re)) {
           ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:67:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:69:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, decimal_val, decimal_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:79:12: note: +1, nesting level increased to 2
    } else if (std::regex_search(values[0], int_re)) {
           ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:81:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:83:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, int_val, int_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:92:7: note: +1, nesting level increased to 2
    } else {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:18:44: error: the parameter 'filename' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
void ConfigReader::ParseConfig(std::string filename) {
                                           ^
                               const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:74:30: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
        var_values.push_back(atof(decimal_val.str().c_str()));
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:88:30: warning: 'atoll' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtoll' instead [cert-err34-c]
        var_values.push_back(atoll(int_val.str().c_str()));
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:103:43: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
uint64_t ConfigReader::IntVal(std::string key, uint32_t index) const {
                                          ^
                              const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:104:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:110:42: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
float ConfigReader::FloatVal(std::string key, uint32_t index) const {
                                         ^
                             const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:111:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:117:44: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
double ConfigReader::DoubleVal(std::string key, uint32_t index) const {
                                           ^
                               const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:118:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:124:53: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
const std::string& ConfigReader::StrVal(std::string key, uint32_t index) const {
                                                    ^
                                        const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:125:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:131:42: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
bool ConfigReader::ValExists(std::string key) const {
                                         ^
                             const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:132:10: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  return config_vars.count(key);
         ^
                                != 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:150:74: error: the parameter 'val' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
std::ostream& operator<<(std::ostream& out, std::shared_ptr<ConfigValue> val) {
                                                                         ^
                                            const                       &
clang-tidy -p=/Users/nmeisburger/Files/Research/Universe /Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:9:10: warning: variable 'loc' is not initialized [cppcoreguidelines-init-variables]
  size_t loc;
         ^
             = 0
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:18:20: error: function 'ParseConfig' has cognitive complexity of 36 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void ConfigReader::ParseConfig(std::string filename) {
                   ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:23:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (std::getline(file, line)) {
  ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:24:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::regex_search(line, comment_re) ||
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:24:45: note: +1
    if (std::regex_search(line, comment_re) ||
                                            ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:30:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (!std::regex_search(line, key, key_re)) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:37:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (loc == std::string::npos) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:45:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (values.empty()) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:50:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::regex_search(values[0], string_re)) {
    ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:52:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:54:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, str_val, string_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:65:12: note: +1, nesting level increased to 2
    } else if (std::regex_search(values[0], decimal_re)) {
           ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:67:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:69:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, decimal_val, decimal_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:79:12: note: +1, nesting level increased to 2
    } else if (std::regex_search(values[0], int_re)) {
           ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:81:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for (const auto& val : values) {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:83:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!std::regex_search(val, int_val, int_re)) {
        ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:92:7: note: +1, nesting level increased to 2
    } else {
      ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:18:44: error: the parameter 'filename' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
void ConfigReader::ParseConfig(std::string filename) {
                                           ^
                               const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:74:30: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
        var_values.push_back(atof(decimal_val.str().c_str()));
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:88:30: warning: 'atoll' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtoll' instead [cert-err34-c]
        var_values.push_back(atoll(int_val.str().c_str()));
                             ^
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:103:43: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
uint64_t ConfigReader::IntVal(std::string key, uint32_t index) const {
                                          ^
                              const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:104:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:110:42: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
float ConfigReader::FloatVal(std::string key, uint32_t index) const {
                                         ^
                             const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:111:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:117:44: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
double ConfigReader::DoubleVal(std::string key, uint32_t index) const {
                                           ^
                               const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:118:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:124:53: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
const std::string& ConfigReader::StrVal(std::string key, uint32_t index) const {
                                                    ^
                                        const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:125:8: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!config_vars.count(key)) {
      ~^
                              == 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:131:42: error: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
bool ConfigReader::ValExists(std::string key) const {
                                         ^
                             const      &
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:132:10: error: implicit conversion 'std::unordered_map<std::basic_string<char>, std::shared_ptr<thirdai::bolt::ConfigValue>>::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  return config_vars.count(key);
         ^
                                != 0u
/Users/nmeisburger/files/Research/Universe/bolt/src/Config.cc:150:74: error: the parameter 'val' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
std::ostream& operator<<(std::ostream& out, std::shared_ptr<ConfigValue> val) {
                                                                         ^
                                            const                       &
