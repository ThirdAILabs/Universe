from thirdai import bolt
from utils import gen_numpy_training_data, get_simple_dag_model
import pytest

# pytestmark = [pytest.mark.unit]
N_CLASSES = 10


def get_lr_scheduling_config():
    return bolt.graph.callbacks.LRSchedulingConfig.make(
        "multiplicative-lr"
    ).with_parameters({"factor": [0.9]})


def get_model():

    train_data, train_labels = gen_numpy_training_data(
        n_classes=N_CLASSES, n_samples=50, noise_std=0.3
    )
    model = get_simple_dag_model(
        input_dim=N_CLASSES,
        hidden_layer_dim=2000,
        hidden_layer_sparsity=1.0,
        output_dim=N_CLASSES,
        output_activation="softmax",
        loss=bolt.CategoricalCrossEntropyLoss(),
    )
    # predict_config = bolt.graph.PredictConfig.make().with_metrics(
    #     ["categorical_accuracy"]
    # )

    train_config = (
        bolt.graph.TrainConfig.make(learning_rate=0.01, epochs=20)
        .with_metrics(["categorical_accuracy"])
        .with_callbacks(
            [
                bolt.graph.callbacks.LearningRateScheduler(
                    config=get_lr_scheduling_config()
                )
            ]
        )
        .silence()
    )

    model.train(train_data, train_labels, train_config)

    return model

    # train_config =


@pytest.mark.unit
def test_learning_rate_scheduler():
    model = get_model()
    assert 1 == 1
