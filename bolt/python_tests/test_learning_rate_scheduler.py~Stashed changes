from pyexpat import model
from thirdai import bolt
from utils import gen_numpy_training_data, get_simple_dag_model
import pytest
import math

pytestmark = [pytest.mark.unit]
N_CLASSES = 10


def get_lr_scheduling_config():
    return bolt.graph.callbacks.LRSchedulingConfig.make(
        "multiplicative-lr"
    ).with_parameters({"factor": [0.5]})


def get_model():

    train_data, train_labels = gen_numpy_training_data(
        n_classes=N_CLASSES, n_samples=50, noise_std=0.3
    )
    model = get_simple_dag_model(
        input_dim=N_CLASSES,
        hidden_layer_dim=2000,
        hidden_layer_sparsity=1.0,
        output_dim=N_CLASSES,
        output_activation="softmax",
        loss=bolt.CategoricalCrossEntropyLoss(),
    )

    train_config = (
        bolt.graph.TrainConfig.make(learning_rate=0.01, epochs=20)
        .with_metrics(["categorical_accuracy"])
        .with_callbacks(
            [
                bolt.graph.callbacks.LearningRateScheduler(
                    config=get_lr_scheduling_config()
                )
            ]
        )
    )
    train_state = bolt.graph.callbacks.TrainState(train_config, 64, 50)
    model.train(train_data, train_labels, train_config)

    return train_config, model, train_state



@pytest.mark.unit
def test_learning_rate_scheduler():
    train_config, model , train_state = get_model()
    assert math.isclose(train_state.learning_rate, 0.005, rel_tol=0.0001)

    
