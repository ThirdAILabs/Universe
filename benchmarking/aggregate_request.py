import argparse
import os
import json

# This file aggregates the generated benchmark results into a single json
# request. There can be any number of nested folders in the passed in root
# benchmarking folder, but currently only the deepest two will be saved as a
# header, so e.g. if the root is Universe/benchmarking and there is a folder
# called Universe/benchmarking/Test/MagSearch/ImageNet that contains
# benchmarking files, then the autogenerated header of those files will be
# "MagSearch Imagenet".

parser = argparse.ArgumentParser(
    description="Aggregate generated benchmark results into a json request."
)
parser.add_argument(
    "benchmarking_folder",
    help="The path to the folder containing the generated benchmarking files, as well as where the generated request will be saved.",
)
args = parser.parse_args()


def add_folder_to_payload(to_append_to, root, files):
    header = {
        "type": "header",
        "text": {
            "type": "plain_text",
            "text": " ".join(root.split("/")[-2:]) + " Benchmarks",
        },
    }
    to_append_to.append(header)

    absolute_files = [root + "/" + name for name in files]
    absolute_files.sort(key=os.path.getctime)
    for file_name in absolute_files:

        if file_name.endswith(".txt"):
            with open(file_name) as f:
                all_text = f.read()
            section = {"type": "section", "text": {"type": "mrkdwn", "text": all_text}}
            to_append_to.append(section)

        if file_name.endswith(".png"):
            image_url = save_to_s3(file_name)
            section = {
                "type": "section",
                "accessory": {"type": "image", "image_url": image_url},
            }
            to_append_to.append(section)


blocks = []
# See https://stackoverflow.com/questions/16953842/using-os-walk-to-recursively-traverse-directories-in-python/54673093
for root, dirs, files in os.walk(args.benchmarking_folder):
    # We don't want to send from the root benchmarking folder since it only
    # contains some useful scripts (including this one)
    if root != args.benchmarking_folder and len(files) != 0:
        add_folder_to_payload(blocks, root, files)

payload = {"text": "Benchmarks Completed", "blocks": blocks}

with open(args.benchmarking_folder + "/request.json", "w") as f:
    json.dump(payload, f)
