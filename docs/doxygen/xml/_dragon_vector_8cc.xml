<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_dragon_vector_8cc" kind="file" language="C++">
    <compoundname>DragonVector.cc</compoundname>
    <includes refid="_dragon_vector_8h" local="yes">DragonVector.h</includes>
    <includes refid="_compressed_vector_8h" local="yes">CompressedVector.h</includes>
    <includes refid="_serializer_8h" local="yes">Serializer.h</includes>
    <includes refid="_universal_hash_8h" local="no">hashing/src/UniversalHash.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="3">
        <label>CompressedVector.h</label>
        <link refid="_compressed_vector_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>CompressionUtils.h</label>
        <link refid="_compression_utils_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>compression/src/DragonVector.cc</label>
        <link refid="_dragon_vector_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>DragonVector.h</label>
        <link refid="_dragon_vector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Serializer.h</label>
        <link refid="_serializer_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>hashing/src/UniversalHash.h</label>
        <link refid="_universal_hash_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="6">
        <label>cereal/access.hpp</label>
      </node>
      <node id="7">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="19">
        <label>cmath</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>cstring</label>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="12">
        <label>random</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="18">
        <label>sys/types.h</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1compression">thirdai::compression</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_dragon_vector_8cc_1a7db7d0f202eb52f4fa54962aec784730" prot="public" static="no">
        <type><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">thirdai::hashing::UniversalHash</ref></type>
        <definition>using UniversalHash =  thirdai::hashing::UniversalHash</definition>
        <argsstring></argsstring>
        <name>UniversalHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.cc" line="13" column="1" bodyfile="compression/src/DragonVector.cc" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;DragonVector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CompressedVector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Serializer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hashing/src/UniversalHash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref><sp/>=<sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">thirdai::hashing::UniversalHash</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::compression<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">DragonVector&lt;T&gt;::DragonVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>vector_to_compress,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>compression_density,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>seed_for_hashing,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sample_population_size)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>DragonVector(vector_to_compress.data(),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;uint32_t&gt;(vector_to_compress.size()),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compression_density,<sp/>seed_for_hashing,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_population_size)<sp/>{}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">DragonVector&lt;T&gt;::DragonVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>values_to_compress,<sp/>uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>compression_density,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>seed_for_hashing,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sample_population_size)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_uncompressed_size(size),<sp/>_seed_for_hashing(seed_for_hashing)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sketch_size<sp/>=</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::max(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(compression_density<sp/>*<sp/>size),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(size,<sp/>_min_sketch_size));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>_indices.assign(sketch_size,<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>_values.assign(sketch_size,<sp/>0);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>routine<sp/>first<sp/>calculates<sp/>an<sp/>approximate<sp/>top-k<sp/>threshold.<sp/>Then,<sp/>it</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>*<sp/>sketches<sp/>the<sp/>original<sp/>vector<sp/>to<sp/>a<sp/>smaller<sp/>dragon<sp/>vector.<sp/>It<sp/>sketches<sp/>only</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>values<sp/>which<sp/>are<sp/>larger<sp/>than<sp/>the<sp/>threshold.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>T<sp/>estimated_threshold<sp/>=<sp/>estimateTopKThreshold(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_to_compress,<sp/>size,<sp/>compression_density,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*seed_for_sampling=*/</highlight><highlight class="normal">seed_for_hashing,<sp/>sample_population_size);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>sketch(values_to_compress,<sp/>estimated_threshold,<sp/>size,<sp/>sketch_size);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>The<sp/>methods<sp/>hashes<sp/>the<sp/>(index,<sp/>value)<sp/>pair<sp/>in<sp/>the<sp/>original<sp/>array<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>vectors<sp/>(_indices,<sp/>_values)<sp/>if<sp/>the<sp/>value<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>threshold.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;::sketch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>values,<sp/>T<sp/>threshold,<sp/>uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sketch_size)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref><sp/>hash_function<sp/>=<sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref>(_seed_for_hashing);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>*<sp/>TODO(TSK-567):<sp/>MSVC<sp/>complains<sp/>about<sp/>sharing<sp/>values<sp/>in<sp/>the<sp/>below<sp/>block.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Disabling<sp/>short<sp/>term<sp/>to<sp/>get<sp/>builds<sp/>green.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>D:\a\Universe\Universe\compression\src\DragonVector.cc(68,9):<sp/>error</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>C3028:<sp/>&apos;thirdai::compression::DragonVector&lt;float&gt;::_values&apos;:<sp/>only<sp/>a</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>variable<sp/>or<sp/>static<sp/>data<sp/>member<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>data-sharing<sp/>clause</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>[D:\a\Universe\Universe\build\_thirdai.vcxproj]</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>default(none)<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>shared(values,<sp/>sketch_size,<sp/>threshold,<sp/>size,<sp/>hash_function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(values[i])<sp/>&gt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>hash<sp/>=<sp/>hash_function.<ref refid="classthirdai_1_1hashing_1_1_universal_hash_1ac2db5418a5d52da282150d59cc0024ab" kindref="member">gethash</ref>(i)<sp/>%<sp/>sketch_size;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_indices[hash]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_values[hash]<sp/>=<sp/>values[i];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>index<sp/>at<sp/>the<sp/>hash<sp/>position<sp/>is<sp/>equal<sp/>to<sp/>index,<sp/>we<sp/>return<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>back,<sp/>otherwise<sp/>we<sp/>return<sp/>a<sp/>zero<sp/>because<sp/>the<sp/>index<sp/>is<sp/>not<sp/>stored<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Dragon<sp/>Vector</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">T<sp/>DragonVector&lt;T&gt;::get(uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sketch_size<sp/>=<sp/>_indices.size();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref><sp/>hash_function<sp/>=<sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref>(_seed_for_hashing);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>uint32_t<sp/>hash<sp/>=<sp/>hash_function.<ref refid="classthirdai_1_1hashing_1_1_universal_hash_1ac2db5418a5d52da282150d59cc0024ab" kindref="member">gethash</ref>(index)<sp/>%<sp/>sketch_size;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_indices[hash]<sp/>==<sp/>index)<sp/>*<sp/>_values[hash];</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;::set(uint32_t<sp/>index,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sketch_size<sp/>=<sp/>_indices.size();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref><sp/>hash_function<sp/>=<sp/><ref refid="classthirdai_1_1hashing_1_1_universal_hash" kindref="compound">UniversalHash</ref>(_seed_for_hashing);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>uint32_t<sp/>hash<sp/>=<sp/>hash_function.<ref refid="classthirdai_1_1hashing_1_1_universal_hash_1ac2db5418a5d52da282150d59cc0024ab" kindref="member">gethash</ref>(index)<sp/>%<sp/>sketch_size;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>_indices[hash]<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>_values[hash]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;::clear()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>_uncompressed_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>_values.clear();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>_indices.clear();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>Implementing<sp/>utility<sp/>methods<sp/>for<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;::extend(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>*<sp/>NOTE:<sp/>Do<sp/>not<sp/>call<sp/>get<sp/>function<sp/>on<sp/>a<sp/>Dragon<sp/>Vector<sp/>which<sp/>has<sp/>been<sp/>extended</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>*<sp/>by<sp/>another<sp/>one.<sp/>On<sp/>extending<sp/>a<sp/>Dragon<sp/>Sketch,<sp/>the<sp/>sketch<sp/>size<sp/>changes<sp/>which</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>*<sp/>means<sp/>that<sp/>we<sp/>cannot<sp/>use<sp/>get<sp/>function<sp/>on<sp/>this<sp/>modified<sp/>sketch.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check<sp/>whether<sp/>the<sp/>seeds<sp/>for<sp/>hashing<sp/>are<sp/>the<sp/>same<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>two<sp/>Dragon<sp/>vectors<sp/>since<sp/>we<sp/>will<sp/>directly<sp/>append<sp/>the<sp/>indices<sp/>and<sp/>values<sp/>of</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*<sp/>given<sp/>vector<sp/>to<sp/>the<sp/>current<sp/>one<sp/>and<sp/>leave<sp/>all<sp/>other<sp/>parameters<sp/>intact.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Extend<sp/>is<sp/>non-lossy,<sp/>we<sp/>do<sp/>not<sp/>lose<sp/>any<sp/>information<sp/>about<sp/>indices,values</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>*<sp/>even<sp/>when<sp/>we<sp/>add<sp/>Dragon<sp/>Vectors<sp/>with<sp/>different<sp/>seeds.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>_indices.insert(std::end(_indices),<sp/>std::begin(vec._indices),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(vec._indices));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>_values.insert(std::end(_values),<sp/>std::begin(vec._values),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(vec._values));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_uncompressed_size<sp/>remains<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>We<sp/>are<sp/>storing<sp/>indices,values<sp/>tuple<sp/>hence,<sp/>decompressing<sp/>is<sp/>just</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>putting<sp/>corresponding<sp/>values<sp/>for<sp/>the<sp/>stored<sp/>indices</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">std::vector&lt;T&gt;<sp/>DragonVector&lt;T&gt;::decompress()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>decompressedVector(_uncompressed_size,<sp/>0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sketch_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_indices.size());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sketch_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>decompressedVector[_indices[i]]<sp/>+=<sp/>_values[i];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decompressedVector;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">CompressionScheme<sp/>DragonVector&lt;T&gt;::type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompressionScheme::Dragon;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>The<sp/>order<sp/>of<sp/>serialization<sp/>for<sp/>dragon<sp/>vector<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>1)<sp/>An<sp/>enum<sp/>representing<sp/>compression<sp/>scheme</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>2)<sp/>Uncompressed<sp/>Size<sp/>of<sp/>the<sp/>vector</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>3)<sp/>Seed<sp/>for<sp/>hashing</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>4)<sp/>Indices<sp/>and<sp/>then<sp/>values<sp/>array</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>While<sp/>writing<sp/>vectors,<sp/>we<sp/>first<sp/>write<sp/>the<sp/>size<sp/>and<sp/>then<sp/>the<sp/>contents.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DragonVector&lt;T&gt;::serialize(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>serialized_data)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>serializer::BinaryOutputHelper<sp/>outputHelper(serialized_data);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>compression<sp/>scheme<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>uint32_t<sp/>compression_scheme<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>outputHelper.write(&amp;compression_scheme);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>uncompressed<sp/>size,<sp/>seed_for_hashing<sp/>(2,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>outputHelper.write(&amp;_uncompressed_size);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>outputHelper.write(&amp;_seed_for_hashing);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>indices<sp/>and<sp/>values<sp/>vectors<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>outputHelper.writeVector(_indices);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>outputHelper.writeVector(_values);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">DragonVector&lt;T&gt;::DragonVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>serialized_data)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>serializer::BinaryInputHelper<sp/>inputHelper(serialized_data);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>the<sp/>compression<sp/>scheme<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>uint32_t<sp/>compression_scheme;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>inputHelper.read(&amp;compression_scheme);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>uncompressed<sp/>size,<sp/>seed_for_hashing<sp/>(2,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>uint32_t<sp/>uncompressed_size;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>uint32_t<sp/>seed_for_hashing;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>inputHelper.read(&amp;uncompressed_size);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>inputHelper.read(&amp;seed_for_hashing);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>_uncompressed_size<sp/>=<sp/>uncompressed_size;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>_seed_for_hashing<sp/>=<sp/>seed_for_hashing;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>indices<sp/>and<sp/>values<sp/>array<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>inputHelper.readVector(_indices);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>inputHelper.readVector(_values);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">uint32_t<sp/>DragonVector&lt;T&gt;::serialized_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>uint32_t<sp/>serialized_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compression<sp/>scheme<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>serialized_size<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Uncompressed<sp/>size,<sp/>seed_for_hashing<sp/>(2,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>serialized_size<sp/>+=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>indices<sp/>array<sp/>(4).<sp/>We<sp/>first<sp/>write<sp/>the<sp/>size<sp/>and<sp/>then<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>serialized_size<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)<sp/>+<sp/>_indices.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>values<sp/>array<sp/>(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>serialized_size<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)<sp/>+<sp/>_values.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serialized_size;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DragonVector&lt;float&gt;;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::compression</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="compression/src/DragonVector.cc"/>
  </compounddef>
</doxygen>
