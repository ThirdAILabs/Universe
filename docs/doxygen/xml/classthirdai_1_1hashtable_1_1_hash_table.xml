<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classthirdai_1_1hashtable_1_1_hash_table" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>thirdai::hashtable::HashTable</compoundname>
    <derivedcompoundref refid="classthirdai_1_1hashtable_1_1_sampled_hash_table" prot="public" virt="non-virtual">thirdai::hashtable::SampledHashTable&lt; LABEL_T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classthirdai_1_1hashtable_1_1_vector_hash_table" prot="public" virt="non-virtual">thirdai::hashtable::VectorHashTable&lt; LABEL_T, USE_RESERVOIR &gt;</derivedcompoundref>
    <includes refid="_hash_table_8h" local="no">HashTable.h</includes>
    <templateparamlist>
      <param>
        <type>typename LABEL_T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classthirdai_1_1hashtable_1_1_hash_table_1adaff6d5fd3c18382448d34c65f95249d" prot="protected" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t thirdai::hashtable::HashTable&lt; LABEL_T &gt;::DEFAULT_MAX_RAND</definition>
        <argsstring></argsstring>
        <name>DEFAULT_MAX_RAND</name>
        <qualifiedname>thirdai::hashtable::HashTable::DEFAULT_MAX_RAND</qualifiedname>
        <initializer>= 10000</initializer>
        <briefdescription>
<para>The default number of random pregenerated numbers to use for sampling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="70" column="25" bodyfile="hashtable/src/HashTable.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classthirdai_1_1hashtable_1_1_hash_table_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <qualifiedname>thirdai::hashtable::HashTable::access</qualifiedname>
        <param>
          <type>cereal::access</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="74" column="16" bodyfile="hashtable/src/HashTable.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1a9a7d8614318e4035807d13b1076cfdf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::insert</definition>
        <argsstring>(uint64_t n, LABEL_T const *labels, uint32_t const *hashes)=0</argsstring>
        <name>insert</name>
        <qualifiedname>thirdai::hashtable::HashTable::insert</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1a2c9e97cad2ff7a17ff5ed82d954da313">insert</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1a480a8bff172519a7a560ee7f82520fd1">insert</reimplementedby>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>LABEL_T const *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>hashes</declname>
        </param>
        <briefdescription>
<para>Do a parallel insertion of n elements. </para>
        </briefdescription>
        <detaileddescription>
<para>The hashes should be in hash major order, i.e. as returned by the <ref refid="_hash_function_8h_source" kindref="compound">HashFunction.h</ref> class, the ith hash of the jth vector should be in position num_tables * i + j. The label of the ith vector to insert into the hash table should be labels[i]. All hashes should be less than the hash table range, and there should be exactly num_tables * n number of them. This will not be checked and will cause segfaults if it is not followed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="27" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1a0f5e5a1d64a9d0dd4293adadd7da937e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::insertSequential</definition>
        <argsstring>(uint64_t n, LABEL_T start, uint32_t const *hashes)=0</argsstring>
        <name>insertSequential</name>
        <qualifiedname>thirdai::hashtable::HashTable::insertSequential</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1abc3ac6aa45c0f162e645fa1ee4788129">insertSequential</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1a8a1026d1fefa89928f5a37fb6ba313bf">insertSequential</reimplementedby>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>LABEL_T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>hashes</declname>
        </param>
        <briefdescription>
<para>Same as the insert method, except the ith vector will be inserted with the label start + i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="34" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1a8493d373a764c72a7d1e0604d4844401" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::queryBySet</definition>
        <argsstring>(uint32_t const *hashes, std::unordered_set&lt; LABEL_T &gt; &amp;store) const =0</argsstring>
        <name>queryBySet</name>
        <qualifiedname>thirdai::hashtable::HashTable::queryBySet</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1a6a2bdd803a703631d1eaf6f1273462b1">queryBySet</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1aceefb06de7c841b313171c83298043b3">queryBySet</reimplementedby>
        <param>
          <type>uint32_t const *</type>
          <declname>hashes</declname>
        </param>
        <param>
          <type>std::unordered_set&lt; LABEL_T &gt; &amp;</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>The hashes array should have length equal to the number of tables, and the ith entry should be a bucket index into the ith table. </para>
        </briefdescription>
        <detaileddescription>
<para>This query adds to the store set all labels that are in any of the hashed to buckets across all tables. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="43" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1ad16f0cfcd1af69fbb030e89e7953dcc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::queryByCount</definition>
        <argsstring>(uint32_t const *hashes, std::vector&lt; uint32_t &gt; &amp;counts) const =0</argsstring>
        <name>queryByCount</name>
        <qualifiedname>thirdai::hashtable::HashTable::queryByCount</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1ae6075520685df0c1ddb647f6d80ce524">queryByCount</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1abf6470c7daf45d12d2e29fd4db08629b">queryByCount</reimplementedby>
        <param>
          <type>uint32_t const *</type>
          <declname>hashes</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>counts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="46" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1a5d9f4bbeeb994e4c95a32179b9b61366" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::queryByVector</definition>
        <argsstring>(uint32_t const *hashes, std::vector&lt; LABEL_T &gt; &amp;results) const =0</argsstring>
        <name>queryByVector</name>
        <qualifiedname>thirdai::hashtable::HashTable::queryByVector</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1ada75bfdc1d36ba6cfc0882d2e38d8614">queryByVector</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1a9f85e1ecea2bf7312727f64639b21853">queryByVector</reimplementedby>
        <param>
          <type>uint32_t const *</type>
          <declname>hashes</declname>
        </param>
        <param>
          <type>std::vector&lt; LABEL_T &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <briefdescription>
<para>Same as queryBySet, except adds to the results vector all labels that are in any of the hashed to buckets. </para>
        </briefdescription>
        <detaileddescription>
<para>A label can appear twice in the results vector if it was in multiple buckets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="54" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1a5b1cae616f6eeaa53fcf8bbbc86c0d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::clearTables</definition>
        <argsstring>()=0</argsstring>
        <name>clearTables</name>
        <qualifiedname>thirdai::hashtable::HashTable::clearTables</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1a4ced7450a620c5a53989fbc849eb2a68">clearTables</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1a0a9176b54dd3874205b4d646c1517cd4">clearTables</reimplementedby>
        <briefdescription>
<para>Removes all elements from all tables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="58" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1ac9acc44cca78fc831b047bcf0f80d727" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t thirdai::hashtable::HashTable&lt; LABEL_T &gt;::numTables</definition>
        <argsstring>() const =0</argsstring>
        <name>numTables</name>
        <qualifiedname>thirdai::hashtable::HashTable::numTables</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1ab95e20a87e6f118faa3ad868d6af06f4">numTables</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1ab64d69146bb759ee01fd1f9a597a0fa5">numTables</reimplementedby>
        <briefdescription>
<para>Returns the total number of tables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="61" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1ab44d9352b51b00bc51577dc542d6732e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint64_t</type>
        <definition>virtual uint64_t thirdai::hashtable::HashTable&lt; LABEL_T &gt;::tableRange</definition>
        <argsstring>() const =0</argsstring>
        <name>tableRange</name>
        <qualifiedname>thirdai::hashtable::HashTable::tableRange</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_sampled_hash_table_1a9faa07f264b351e1b875107b2ad8fca3">tableRange</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashtable_1_1_vector_hash_table_1a0849ea1d0044c2f470520bb12abf3e65">tableRange</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="64" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1ae07e848e80f02d6b0bb3052a48c7a6eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual thirdai::hashtable::HashTable&lt; LABEL_T &gt;::~HashTable</definition>
        <argsstring>()</argsstring>
        <name>~HashTable</name>
        <qualifiedname>thirdai::hashtable::HashTable::~HashTable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="64" column="20" bodyfile="hashtable/src/HashTable.h" bodystart="66" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthirdai_1_1hashtable_1_1_hash_table_1adfb21d6e2a2699f0f88ca668062dcf37" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void thirdai::hashtable::HashTable&lt; LABEL_T &gt;::serialize</definition>
        <argsstring>(Archive &amp;archive)</argsstring>
        <name>serialize</name>
        <qualifiedname>thirdai::hashtable::HashTable::serialize</qualifiedname>
        <param>
          <type>Archive &amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashtable/src/HashTable.h" line="76" column="8" bodyfile="hashtable/src/HashTable.h" bodystart="76" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the abstract <ref refid="classthirdai_1_1hashtable_1_1_hash_table" kindref="compound">HashTable</ref> interface, which represents n hash tables with a certain range. </para>
    </briefdescription>
    <detaileddescription>
<para>It abstracts batch indexing and single queries. Implementations are intended to parallilize batch indexing. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>thirdai::hashtable::HashTable&lt; LABEL_T &gt;</label>
        <link refid="classthirdai_1_1hashtable_1_1_hash_table"/>
      </node>
      <node id="2">
        <label>thirdai::hashtable::SampledHashTable&lt; LABEL_T &gt;</label>
        <link refid="classthirdai_1_1hashtable_1_1_sampled_hash_table"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>thirdai::hashtable::VectorHashTable&lt; LABEL_T, USE_RESERVOIR &gt;</label>
        <link refid="classthirdai_1_1hashtable_1_1_vector_hash_table"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="hashtable/src/HashTable.h" line="16" column="1" bodyfile="hashtable/src/HashTable.h" bodystart="16" bodyend="79"/>
    <listofallmembers>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>thirdai::hashtable::HashTable</scope><name>cereal::access</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1a5b1cae616f6eeaa53fcf8bbbc86c0d51" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>clearTables</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1adaff6d5fd3c18382448d34c65f95249d" prot="protected" virt="non-virtual"><scope>thirdai::hashtable::HashTable</scope><name>DEFAULT_MAX_RAND</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1a9a7d8614318e4035807d13b1076cfdf3" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>insert</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1a0f5e5a1d64a9d0dd4293adadd7da937e" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>insertSequential</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1ac9acc44cca78fc831b047bcf0f80d727" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>numTables</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1ad16f0cfcd1af69fbb030e89e7953dcc2" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>queryByCount</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1a8493d373a764c72a7d1e0604d4844401" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>queryBySet</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1a5d9f4bbeeb994e4c95a32179b9b61366" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>queryByVector</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1adfb21d6e2a2699f0f88ca668062dcf37" prot="private" virt="non-virtual"><scope>thirdai::hashtable::HashTable</scope><name>serialize</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1ab44d9352b51b00bc51577dc542d6732e" prot="public" virt="pure-virtual"><scope>thirdai::hashtable::HashTable</scope><name>tableRange</name></member>
      <member refid="classthirdai_1_1hashtable_1_1_hash_table_1ae07e848e80f02d6b0bb3052a48c7a6eb" prot="public" virt="virtual"><scope>thirdai::hashtable::HashTable</scope><name>~HashTable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
