<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_utils_8h" kind="file" language="C++">
    <compoundname>Utils.h</compoundname>
    <includes local="no">wrappers/src/EigenDenseWrapper.h</includes>
    <includes local="no">numeric</includes>
    <includes local="no">queue</includes>
    <includes local="no">vector</includes>
    <includedby refid="_doc_search_8h" local="yes">search/src/DocSearch.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>search/src/Utils.h</label>
        <link refid="_utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>numeric</label>
      </node>
      <node id="4">
        <label>queue</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="2">
        <label>wrappers/src/EigenDenseWrapper.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>search/src/DocSearch.h</label>
        <link refid="_doc_search_8h_source"/>
      </node>
      <node id="1">
        <label>search/src/Utils.h</label>
        <link refid="_utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1search">thirdai::search</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wrappers/src/EigenDenseWrapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::search<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeDuplicates(std::vector&lt;T&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>std::sort(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>v.erase(unique(v.begin(),<sp/>v.end()),<sp/>v.end());</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Consumes<sp/>a<sp/>min<sp/>heap<sp/>of<sp/>pairs<sp/>and<sp/>returns<sp/>a<sp/>vector<sp/>sorted<sp/>in<sp/>descending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>second<sp/>items<sp/>in<sp/>the<sp/>pairs,<sp/>where<sp/>descending<sp/>order<sp/>is<sp/>defined<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>min<sp/>heap<sp/>order<sp/>(the<sp/>current<sp/>top<sp/>element<sp/>in<sp/>the<sp/>min<sp/>heap<sp/>is<sp/>the<sp/>smallest,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::vector&lt;uint32_t&gt;<sp/>minHeapPairsToDescending(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::priority_queue&lt;std::pair&lt;T,<sp/>uint32_t&gt;&gt;&amp;<sp/>min_heap)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!min_heap.empty())<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>is<sp/>the<sp/>pair<sp/>with<sp/>the<sp/>smallest<sp/>score<sp/>still<sp/>in<sp/>the<sp/>heap<sp/>as<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>and<sp/>the<sp/>second<sp/>item<sp/>in<sp/>the<sp/>pair<sp/>is<sp/>the<sp/>element<sp/>corresponding<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>score,<sp/>so<sp/>we<sp/>push<sp/>back<sp/>he<sp/>second<sp/>element<sp/>into<sp/>the<sp/>result<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(min_heap.top().second);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>min_heap.pop();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::reverse(result.begin(),<sp/>result.end());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Identifies<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>largest<sp/>k<sp/>elements<sp/>in<sp/>an<sp/>Eigen<sp/>Float<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;uint32_t&gt;<sp/>argmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXf&amp;<sp/>input,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>top_k)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>negate<sp/>values<sp/>so<sp/>that<sp/>we<sp/>can<sp/>treat<sp/>the<sp/>stl<sp/>priority<sp/>queue,<sp/>which<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>max-heap,<sp/>as<sp/>a<sp/>min-heap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::priority_queue&lt;std::pair&lt;float,<sp/>uint32_t&gt;&gt;<sp/>min_heap;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_heap.size()<sp/>&lt;<sp/>top_k)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_heap.emplace(-input[i],<sp/>i);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-input[i]<sp/>&lt;<sp/>min_heap.top().first)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_heap.pop();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_heap.emplace(-input[i],<sp/>i);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minHeapPairsToDescending(min_heap);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>an<sp/>argsort<sp/>on<sp/>the<sp/>input<sp/>vector.<sp/>The<sp/>sort<sp/>is<sp/>descending,<sp/>e.g.<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>index<sp/>of<sp/>the<sp/>largest<sp/>element<sp/>in<sp/>to_argsort<sp/>is<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result.<sp/>to_argsort<sp/>should<sp/>be<sp/>a<sp/>vector<sp/>of<sp/>size<sp/>less<sp/>than<sp/>UINT32_MAX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">std::vector&lt;uint32_t&gt;<sp/>argsort_descending(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>to_argsort)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/1577475/c-sorting-and-keeping-track-of-indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>indices(to_argsort.size());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::sort(indices.begin(),<sp/>indices.end(),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;to_argsort](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i2)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>to_argsort[i1]<sp/>&gt;<sp/>to_argsort[i2];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::search</highlight></codeline>
    </programlisting>
    <location file="search/src/Utils.h"/>
  </compounddef>
</doxygen>
