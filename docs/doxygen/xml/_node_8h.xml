<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_node_8h" kind="file" language="C++">
    <compoundname>Node.h</compoundname>
    <includes refid="_fully_connected_layer_8h" local="no">bolt/src/layers/FullyConnectedLayer.h</includes>
    <includes refid="_bolt_vector_8h" local="no">bolt_vector/src/BoltVector.h</includes>
    <includes local="no">exceptions/src/Exceptions.h</includes>
    <includes local="no">queue</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includedby refid="_common_networks_8h" local="no">bolt/src/graph/CommonNetworks.h</includedby>
    <includedby refid="_graph_8cc" local="no">bolt/src/graph/Graph.cc</includedby>
    <includedby refid="_graph_8h" local="yes">bolt/src/graph/Graph.h</includedby>
    <includedby refid="_graph_property_checks_8h" local="yes">bolt/src/graph/GraphPropertyChecks.h</includedby>
    <includedby refid="_inference_output_tracker_8h" local="yes">bolt/src/graph/InferenceOutputTracker.h</includedby>
    <includedby refid="_concatenate_8h" local="no">bolt/src/graph/nodes/Concatenate.h</includedby>
    <includedby refid="_dlrm_attention_8h" local="no">bolt/src/graph/nodes/DlrmAttention.h</includedby>
    <includedby refid="_embedding_8h" local="no">bolt/src/graph/nodes/Embedding.h</includedby>
    <includedby refid="_fully_connected_8h" local="no">bolt/src/graph/nodes/FullyConnected.h</includedby>
    <includedby refid="_input_8h" local="no">bolt/src/graph/nodes/Input.h</includedby>
    <includedby refid="_layer_norm_8h" local="no">bolt/src/graph/nodes/LayerNorm.h</includedby>
    <includedby refid="_switch_8h" local="no">bolt/src/graph/nodes/Switch.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>bolt/src/graph/Node.h</label>
        <link refid="_node_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bolt/src/layers/FullyConnectedLayer.h</label>
        <link refid="_fully_connected_layer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>LayerConfig.h</label>
        <link refid="_layer_config_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>LayerUtils.h</label>
        <link refid="_layer_utils_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>bolt/src/layers/Optimizer.h</label>
        <link refid="_optimizer_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>SamplingConfig.h</label>
        <link refid="_sampling_config_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>bolt_vector/src/BoltVector.h</label>
        <link refid="_bolt_vector_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hashing/src/DWTA.h</label>
        <link refid="_d_w_t_a_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>hashing/src/FastSRP.h</label>
        <link refid="_fast_s_r_p_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>HashFunction.h</label>
        <link refid="_hash_function_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>HashUtils.h</label>
        <link refid="_hash_utils_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>hashing/src/SRP.h</label>
        <link refid="_s_r_p_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>HashTable.h</label>
        <link refid="_hash_table_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>hashtable/src/SampledHashTable.h</label>
        <link refid="_sampled_hash_table_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>utils/StringManipulation.h</label>
        <link refid="_string_manipulation_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="17">
        <label>cassert</label>
      </node>
      <node id="32">
        <label>cctype</label>
      </node>
      <node id="6">
        <label>cereal/access.hpp</label>
      </node>
      <node id="15">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="34">
        <label>cereal/types/base_class.hpp</label>
      </node>
      <node id="3">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="7">
        <label>cereal/types/optional.hpp</label>
      </node>
      <node id="10">
        <label>cereal/types/polymorphic.hpp</label>
      </node>
      <node id="4">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="38">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="40">
        <label>exception</label>
      </node>
      <node id="43">
        <label>exceptions/src/Exceptions.h</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>limits</label>
      </node>
      <node id="39">
        <label>memory</label>
      </node>
      <node id="20">
        <label>numeric</label>
      </node>
      <node id="21">
        <label>optional</label>
      </node>
      <node id="22">
        <label>queue</label>
      </node>
      <node id="42">
        <label>random</label>
      </node>
      <node id="23">
        <label>sstream</label>
      </node>
      <node id="24">
        <label>stdexcept</label>
      </node>
      <node id="25">
        <label>string</label>
      </node>
      <node id="31">
        <label>string_view</label>
      </node>
      <node id="44">
        <label>unordered_map</label>
      </node>
      <node id="37">
        <label>unordered_set</label>
      </node>
      <node id="26">
        <label>utility</label>
      </node>
      <node id="27">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>bolt/src/auto_classifiers/AutoClassifierBase.h</label>
        <link refid="_auto_classifier_base_8h_source"/>
      </node>
      <node id="3">
        <label>bolt/src/auto_classifiers/sequential_classifier/SequentialClassifier.h</label>
        <link refid="_sequential_classifier_8h_source"/>
      </node>
      <node id="2">
        <label>bolt/src/graph/CommonNetworks.h</label>
        <link refid="_common_networks_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>bolt/src/graph/DatasetContext.h</label>
        <link refid="_dataset_context_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>bolt/src/graph/DistributedTrainingWrapper.h</label>
        <link refid="_distributed_training_wrapper_8h_source"/>
      </node>
      <node id="4">
        <label>bolt/src/graph/Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>bolt/src/graph/GraphPropertyChecks.h</label>
        <link refid="_graph_property_checks_8h_source"/>
      </node>
      <node id="11">
        <label>bolt/src/graph/InferenceOutputTracker.h</label>
        <link refid="_inference_output_tracker_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>bolt/src/graph/Node.h</label>
        <link refid="_node_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>bolt/src/graph/callbacks/EarlyStopCheckpoint.h</label>
        <link refid="_early_stop_checkpoint_8h_source"/>
      </node>
      <node id="8">
        <label>bolt/src/graph/callbacks/LearningRateScheduler.h</label>
        <link refid="_learning_rate_scheduler_8h_source"/>
      </node>
      <node id="12">
        <label>bolt/src/graph/nodes/Concatenate.h</label>
        <link refid="_concatenate_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>bolt/src/graph/nodes/DlrmAttention.h</label>
        <link refid="_dlrm_attention_8h_source"/>
      </node>
      <node id="14">
        <label>bolt/src/graph/nodes/Embedding.h</label>
        <link refid="_embedding_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>bolt/src/graph/nodes/FullyConnected.h</label>
        <link refid="_fully_connected_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>bolt/src/graph/nodes/Input.h</label>
        <link refid="_input_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>bolt/src/graph/nodes/LayerNorm.h</label>
        <link refid="_layer_norm_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>bolt/src/graph/nodes/Switch.h</label>
        <link refid="_switch_8h_source"/>
      </node>
      <node id="9">
        <label>bolt/src/root_cause_analysis/RootCauseAnalysis.h</label>
        <link refid="_root_cause_analysis_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classthirdai_1_1bolt_1_1_layer_name_manager" prot="public">thirdai::bolt::LayerNameManager</innerclass>
    <innerclass refid="classthirdai_1_1bolt_1_1_node" prot="public">thirdai::bolt::Node</innerclass>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1bolt">thirdai::bolt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bolt/src/layers/FullyConnectedLayer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bolt_vector/src/BoltVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exceptions/src/Exceptions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::bolt<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Node;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Node<sp/>objects<sp/>should<sp/>always<sp/>be<sp/>initialized<sp/>as<sp/>shared<sp/>pointers<sp/>and<sp/>not<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nodes,<sp/>since<sp/>otherwise<sp/>shared_from_this()<sp/>might<sp/>throw<sp/>an<sp/>error<sp/>(we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shared_from_this<sp/>for<sp/>a<sp/>clean<sp/>functional<sp/>style<sp/>python<sp/>api)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">NodePtr<sp/>=<sp/>std::shared_ptr&lt;Node&gt;;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>keeps<sp/>track<sp/>of<sp/>the<sp/>node<sp/>types<sp/>that<sp/>have<sp/>been<sp/>traversed<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>node<sp/>can<sp/>get<sp/>a<sp/>unique<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classthirdai_1_1bolt_1_1_layer_name_manager" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1bolt_1_1_layer_name_manager" kindref="compound">LayerNameManager</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Example<sp/>usage:</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>*<sp/>registerNodeAndGetName(&quot;concat&quot;)<sp/>-&gt;<sp/>concat_1</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>*<sp/>registerNodeAndGetName(&quot;input&quot;)<sp/>-&gt;<sp/>input_1</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>*<sp/>registerNodeAndGetName(&quot;concat&quot;)<sp/>-&gt;<sp/>concat_2</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>*<sp/>registerNodeAndGetName(&quot;fc&quot;)<sp/>-&gt;<sp/>fc_1</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>*<sp/>registerNodeAndGetName(&quot;input&quot;)<sp/>-&gt;<sp/>input_2</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::string<sp/>registerNodeAndGetName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>node_type)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>type_to_count[node_type]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(type_to_count[node_type]);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>uint32_t&gt;<sp/>type_to_count;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>This<sp/>class<sp/>represents<sp/>the<sp/>interface<sp/>used<sp/>for<sp/>nodes<sp/>in<sp/>a<sp/>graph.<sp/>It<sp/>acts<sp/>as<sp/>a</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>state<sp/>machine<sp/>for<sp/>the<sp/>node<sp/>implementation<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>correctly<sp/>in<sp/>the<sp/>graph,<sp/>and<sp/>that<sp/>the<sp/>key<sp/>parts<sp/>of<sp/>its<sp/>initialization<sp/>are</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>called<sp/>in<sp/>the<sp/>correct<sp/>order.<sp/>It<sp/>has<sp/>the<sp/>following<sp/>states:</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>Constructed<sp/>-<sp/>the<sp/>node<sp/>object<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Predecessors<sp/>set<sp/>-<sp/>the<sp/>predecessor<sp/>nodes<sp/>(if<sp/>any)<sp/>of<sp/>the<sp/>node<sp/>are<sp/>set.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>Compiled<sp/>-<sp/>the<sp/>nodes<sp/>name<sp/>is<sp/>set,<sp/>and<sp/>any<sp/>other<sp/>parameters<sp/>that<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>change<sp/>during<sp/>the<sp/>node&apos;s<sp/>lifetime<sp/>are<sp/>set<sp/>(e.g.<sp/>weight<sp/>matrices,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embedding<sp/>tables,<sp/>hash<sp/>tables,<sp/>etc.).</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>4.<sp/>Prepared<sp/>for<sp/>batch<sp/>processing<sp/>-<sp/>in<sp/>this<sp/>state<sp/>any<sp/>temporary<sp/>data</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structures<sp/>for<sp/>maintaining<sp/>the<sp/>state<sp/>of<sp/>the<sp/>node<sp/>are<sp/>created.<sp/>Most</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonly<sp/>this<sp/>will<sp/>be<sp/>allocating<sp/>arrays<sp/>for<sp/>the<sp/>activations<sp/>and</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradients.<sp/>In<sp/>this<sp/>state<sp/>methods<sp/>like<sp/>forward,<sp/>backward,<sp/>etc.<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>This<sp/>node<sp/>parent<sp/>class<sp/>will<sp/>perform<sp/>checks<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>methods</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>are<sp/>called<sp/>from<sp/>the<sp/>correct<sp/>states<sp/>and<sp/>that<sp/>the<sp/>states<sp/>are<sp/>traversed<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>correct<sp/>order.</highlight></codeline>
<codeline lineno="61"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classthirdai_1_1bolt_1_1_node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1bolt_1_1_node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Compiles<sp/>a<sp/>single<sp/>Node,<sp/>including<sp/>initializing<sp/>any<sp/>parameters<sp/>and<sp/>setting</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>Node&apos;s<sp/>name.<sp/>The<sp/>Node<sp/>should<sp/>use<sp/>the<sp/>passed<sp/>in<sp/>LayerNameManager<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>name<sp/>for<sp/>its<sp/>Node<sp/>type.<sp/>This<sp/>moves<sp/>the<sp/>Node<sp/>from<sp/>state<sp/>2<sp/>to<sp/>state<sp/>3.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compile(<ref refid="classthirdai_1_1bolt_1_1_layer_name_manager" kindref="compound">LayerNameManager</ref>&amp;<sp/>name_manager)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>call<sp/>compile<sp/>before<sp/>setting<sp/>predecessor(s)<sp/>of<sp/>this<sp/>Node.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Compiled<sp/>||</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>call<sp/>compile<sp/>twice.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>_name<sp/>=<sp/>name_manager.registerNodeAndGetName(</highlight><highlight class="comment">/*<sp/>node_type<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>type());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>compileImpl();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Computes<sp/>the<sp/>forward<sp/>pass<sp/>for<sp/>the<sp/>node.<sp/>The<sp/>node<sp/>will<sp/>access<sp/>its<sp/>inputs</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*<sp/>through<sp/>the<sp/>getOutput()<sp/>method<sp/>on<sp/>is<sp/>predecessor(s).<sp/>The<sp/>labels<sp/>are<sp/>an</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>*<sp/>optional<sp/>argument<sp/>that<sp/>will<sp/>only<sp/>be<sp/>specified<sp/>for<sp/>the<sp/>output<sp/>layer<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>*<sp/>for<sp/>sparse<sp/>layers<sp/>to<sp/>sample<sp/>the<sp/>labels<sp/>as<sp/>active<sp/>neurons<sp/>during<sp/>training.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>forward<sp/>pass<sp/>must<sp/>fill<sp/>the<sp/>output<sp/>vector<sp/>specified<sp/>by</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>*<sp/>getOutputVector(vec_index),<sp/>including<sp/>setting<sp/>the<sp/>gradients<sp/>equal<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(so<sp/>they<sp/>can<sp/>be<sp/>+=<sp/>to<sp/>correctly<sp/>in<sp/>backpropogate<sp/>in<sp/>succesor<sp/>nodes).</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forward(uint32_t<sp/>vec_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structthirdai_1_1_bolt_vector" kindref="compound">BoltVector</ref>*<sp/>labels)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>forwardImpl(vec_index,<sp/>labels);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>backwards<sp/>pass<sp/>through<sp/>the<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backpropagate(uint32_t<sp/>vec_index)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>backpropagateImpl(vec_index);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Updates<sp/>any<sp/>trainable<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateParameters(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>learning_rate,<sp/>uint32_t<sp/>batch_cnt)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>updateParametersImpl(learning_rate,<sp/>batch_cnt);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ith<sp/>output<sp/>of<sp/>the<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structthirdai_1_1_bolt_vector" kindref="compound">BoltVector</ref>&amp;<sp/>getOutputVector(uint32_t<sp/>vec_index)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getOutputVectorImpl(vec_index);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>output<sp/>dimension<sp/>of<sp/>the<sp/>node.<sp/>This<sp/>is<sp/>used<sp/>for<sp/>subsequent<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>compilation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint32_t<sp/>outputDim()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>nonzeros<sp/>this<sp/>node<sp/>will<sp/>have<sp/>in<sp/>its<sp/>output.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>node<sp/>is<sp/>dense<sp/>then<sp/>this<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>outputDim().<sp/>If<sp/>the<sp/>node<sp/>is<sp/>sparse</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>the<sp/>current<sp/>network<sp/>is<sp/>prepared<sp/>for<sp/>sparse,<sp/>this<sp/>will<sp/>return<sp/>the<sp/>sparse</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dimension,<sp/>the<sp/>number<sp/>of<sp/>neurons<sp/>this<sp/>node<sp/>will<sp/>select<sp/>during<sp/>training<sp/>or</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>*<sp/>inference.<sp/>If<sp/>the<sp/>node<sp/>is<sp/>sparse<sp/>and<sp/>the<sp/>network<sp/>is<sp/>prepared<sp/>for<sp/>dense,</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>outputDim().<sp/>If<sp/>this<sp/>quantity<sp/>is<sp/>unknowable,<sp/>this</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>*<sp/>will<sp/>throw<sp/>an<sp/>error.<sp/>Currently,<sp/>it<sp/>is<sp/>only<sp/>unknowable<sp/>for<sp/>the<sp/>Input<sp/>node,</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>*<sp/>so<sp/>it<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>the<sp/>caller<sp/>to<sp/>call<sp/>isInputNode()<sp/>first.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uint32_t<sp/>numNonzerosInOutput()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>!=<sp/>NodeState::PreparedForBatchProcessing)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>call<sp/>prepareForBatchProcessing<sp/>before<sp/>calling<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numNonzerosInOutput.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numNonzerosInOutputImpl();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>Initializes<sp/>any<sp/>state<sp/>that<sp/>the<sp/>node<sp/>must<sp/>store<sp/>for<sp/>computations<sp/>that<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>nodes<sp/>parameters.<sp/>For<sp/>instance<sp/>this<sp/>could<sp/>be<sp/>the</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>activations/gradients<sp/>for<sp/>a<sp/>batch,<sp/>or<sp/>some<sp/>other<sp/>internal<sp/>state<sp/>that<sp/>must</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>allocated<sp/>after<sp/>the<sp/>batch<sp/>size<sp/>is<sp/>known.<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>before</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>training<sp/>or<sp/>inference<sp/>with<sp/>a<sp/>new<sp/>set<sp/>of<sp/>batches,<sp/>since<sp/>the<sp/>batch<sp/>size<sp/>might</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>change<sp/>in<sp/>different<sp/>calls<sp/>to<sp/>predict<sp/>or<sp/>train.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>moves<sp/>the<sp/>node<sp/>from<sp/>state<sp/>3<sp/>to<sp/>state<sp/>4.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareForBatchProcessing(uint32_t<sp/>batch_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_sparsity)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed<sp/>||</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getState()<sp/>==<sp/>NodeState::PredecessorsSet)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>call<sp/>prepareForBatchProcessing<sp/>before<sp/>calling<sp/>compile.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::PreparedForBatchProcessing)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>call<sp/>prepareForBatchProcessing<sp/>consecutively<sp/>(must<sp/>call<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cleanupAfterBatchProcessing<sp/>in<sp/>between).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>prepareForBatchProcessingImpl(batch_size,<sp/>use_sparsity);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Do<sp/>any<sp/>cleanup<sp/>to<sp/>bring<sp/>the<sp/>Node<sp/>into<sp/>the<sp/>same<sp/>state<sp/>it<sp/>was<sp/>in<sp/>before</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>*<sp/>prepareForBatchProcessing<sp/>was<sp/>called.<sp/>This<sp/>moves<sp/>the<sp/>node<sp/>from<sp/>state<sp/>4<sp/>to</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>*<sp/>state<sp/>3.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanupAfterBatchProcessing()<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>!=<sp/>Node::PreparedForBatchProcessing)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>call<sp/>cleanupAfterBatchProcessing<sp/>after<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;prepareForBatchProcessing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanupAfterBatchProcessingImpl();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>any<sp/>predecessors<sp/>of<sp/>the<sp/>node.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>traverse<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>compilation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::vector&lt;NodePtr&gt;<sp/>getPredecessors()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>get<sp/>the<sp/>predecessors<sp/>for<sp/>this<sp/>layer<sp/>because<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;they<sp/>have<sp/>not<sp/>been<sp/>set<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getPredecessorsImpl();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>Returns<sp/>any<sp/>fully<sp/>connected<sp/>layer<sp/>objects<sp/>used<sp/>by<sp/>the<sp/>node.<sp/>This<sp/>list<sp/>is</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>needed<sp/>by<sp/>the<sp/>graph<sp/>object<sp/>to<sp/>perform<sp/>sparsity<sp/>specific<sp/>operations<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/>entire<sp/>network,<sp/>like<sp/>rebuilding<sp/>all<sp/>hash<sp/>tables<sp/>or<sp/>reinitializing<sp/>hash</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/>functions<sp/>after<sp/>a<sp/>certain<sp/>number<sp/>of<sp/>batches.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;FullyConnectedLayer&gt;&gt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>getInternalFullyConnectedLayers()<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed<sp/>||</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getState()<sp/>==<sp/>NodeState::PredecessorsSet)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>call<sp/>getInternalFullyConnectedLayers<sp/>before<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;calling<sp/>compile.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getInternalFullyConnectedLayersImpl();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>node<sp/>is<sp/>an<sp/>input<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInputNode()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initOptimizer()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>out<sp/>a<sp/>single<sp/>line<sp/>summary<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(pred_names)<sp/>-&gt;<sp/>node_name<sp/>(NodeType):<sp/>parameter_1=1,<sp/>parameter_2=0<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>summarize(std::stringstream&amp;<sp/>summary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>detailed)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed<sp/>||</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getState()<sp/>==<sp/>NodeState::PredecessorsSet)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>summarize<sp/>a<sp/>node<sp/>after<sp/>compiling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>summarizeImpl(summary,<sp/>detailed);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>this<sp/>node<sp/>(only<sp/>valid<sp/>after<sp/>the<sp/>node<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiled).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getState()<sp/>==<sp/>NodeState::Constructed<sp/>||</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getState()<sp/>==<sp/>NodeState::PredecessorsSet)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exceptions::NodeStateMachineError(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>get<sp/>the<sp/>name<sp/>of<sp/>a<sp/>node<sp/>after<sp/>compiling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_name;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>tells<sp/>this<sp/>Node<sp/>it<sp/>will<sp/>be<sp/>used<sp/>during<sp/>distributed<sp/>training.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>chiefly<sp/>is<sp/>relevant<sp/>during<sp/>paramemeter<sp/>updates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>Node<sp/>needs<sp/>to<sp/>know<sp/>that<sp/>it<sp/>cannot<sp/>rely<sp/>on<sp/>its<sp/>own<sp/>tracking<sp/>of<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>neurons<sp/>were<sp/>activated<sp/>(since<sp/>the<sp/>gradient<sp/>will<sp/>also<sp/>be<sp/>aggregated<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>machines),<sp/>and<sp/>so<sp/>it<sp/>should<sp/>do<sp/>a<sp/>dense<sp/>parameter<sp/>update<sp/>no<sp/>matter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>what.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enableDistributedTraining()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1bolt_1_1_node" kindref="compound">~Node</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compileImpl()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;FullyConnectedLayer&gt;&gt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>getInternalFullyConnectedLayersImpl()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareForBatchProcessingImpl(uint32_t<sp/>batch_size,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_sparsity)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint32_t<sp/>numNonzerosInOutputImpl()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forwardImpl(uint32_t<sp/>vec_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structthirdai_1_1_bolt_vector" kindref="compound">BoltVector</ref>*<sp/>labels)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backpropagateImpl(uint32_t<sp/>vec_index)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateParametersImpl(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>learning_rate,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>batch_cnt)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structthirdai_1_1_bolt_vector" kindref="compound">BoltVector</ref>&amp;<sp/>getOutputVectorImpl(uint32_t<sp/>vec_index)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanupAfterBatchProcessingImpl()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;NodePtr&gt;<sp/>getPredecessorsImpl()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>summarizeImpl(std::stringstream&amp;<sp/>summary,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>detailed)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>short<sp/>all<sp/>lowercase<sp/>string<sp/>representing<sp/>the<sp/>type<sp/>of<sp/>this<sp/>node<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>in<sp/>printing<sp/>the<sp/>graph,<sp/>e.g.<sp/>concat,<sp/>fc,<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>NodeState<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Constructed,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>PredecessorsSet,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>Compiled,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>PreparedForBatchProcessing</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>NodeState<sp/>getState()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cereal::access;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>archive)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>archive(_name);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::optional&lt;std::string&gt;<sp/>_name;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::bolt</highlight></codeline>
    </programlisting>
    <location file="bolt/src/graph/Node.h"/>
  </compounddef>
</doxygen>
