<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classthirdai_1_1hashing_1_1_hash_function" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>thirdai::hashing::HashFunction</compoundname>
    <derivedcompoundref refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function" prot="public" virt="non-virtual">thirdai::hashing::DWTAHashFunction</derivedcompoundref>
    <derivedcompoundref refid="classthirdai_1_1hashing_1_1_densified_min_hash" prot="public" virt="non-virtual">thirdai::hashing::DensifiedMinHash</derivedcompoundref>
    <derivedcompoundref refid="classthirdai_1_1hashing_1_1_fast_s_r_p" prot="public" virt="non-virtual">thirdai::hashing::FastSRP</derivedcompoundref>
    <derivedcompoundref refid="classthirdai_1_1hashing_1_1_sparse_random_projection" prot="public" virt="non-virtual">thirdai::hashing::SparseRandomProjection</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classthirdai_1_1hashing_1_1_hash_function_1a57826915b34c6c12fa284f66b97bb7fa" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::hashing::HashFunction::_num_tables</definition>
        <argsstring></argsstring>
        <name>_num_tables</name>
        <qualifiedname>thirdai::hashing::HashFunction::_num_tables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="96" column="12" bodyfile="hashing/src/HashFunction.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1hashing_1_1_hash_function_1a0c52fac590ae2b63ba0c8bc7bd26f9d2" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::hashing::HashFunction::_range</definition>
        <argsstring></argsstring>
        <name>_range</name>
        <qualifiedname>thirdai::hashing::HashFunction::_range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="96" column="24" bodyfile="hashing/src/HashFunction.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classthirdai_1_1hashing_1_1_hash_function_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <qualifiedname>thirdai::hashing::HashFunction::access</qualifiedname>
        <param>
          <type>cereal::access</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="100" column="16" bodyfile="hashing/src/HashFunction.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a6833c66f4e3044d7fd1283c11bbeb173" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>thirdai::hashing::HashFunction::HashFunction</definition>
        <argsstring>(uint32_t num_tables, uint32_t range)</argsstring>
        <name>HashFunction</name>
        <qualifiedname>thirdai::hashing::HashFunction::HashFunction</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>num_tables</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="13" column="12" bodyfile="hashing/src/HashFunction.h" bodystart="13" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a53b6aa78cf43f40af59c112261013624" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; thirdai::hashing::HashFunction::hashBatchParallel</definition>
        <argsstring>(const BoltBatch &amp;batch) const</argsstring>
        <name>hashBatchParallel</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashBatchParallel</qualifiedname>
        <param>
          <type>const <ref refid="classthirdai_1_1_bolt_batch" kindref="compound">BoltBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <briefdescription>
<para>Populates num_hashes number of hashes for each element in the dataset into the output array. </para>
        </briefdescription>
        <detaileddescription>
<para>The output array should be of size num_hashes * batch_size.</para>
<para>The output array should be in vector major order. It should return all of the hashes from the first vector, all of the hashes from the second, and so on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="25" column="15" bodyfile="hashing/src/HashFunction.h" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a9cd2b24706d35c03f6ac35c70ae325d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::hashBatchParallel</definition>
        <argsstring>(const BoltBatch &amp;batch, uint32_t *output) const</argsstring>
        <name>hashBatchParallel</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashBatchParallel</qualifiedname>
        <param>
          <type>const <ref refid="classthirdai_1_1_bolt_batch" kindref="compound">BoltBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="31" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="31" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1aaff56129188ac9376f2647ab86a10f82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::hashSparseParallel</definition>
        <argsstring>(uint64_t num_vectors, const uint32_t *const *indices, const float *const *values, const uint32_t *lengths, uint32_t *output) const</argsstring>
        <name>hashSparseParallel</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashSparseParallel</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>num_vectors</declname>
        </param>
        <param>
          <type>const uint32_t *const *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const float *const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>lengths</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="44" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="44" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a6a05c22dab98b257e9b0cb22dad67c1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::hashDenseParallel</definition>
        <argsstring>(uint64_t num_vectors, const float *const *values, uint32_t dim, uint32_t *output) const</argsstring>
        <name>hashDenseParallel</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashDenseParallel</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>num_vectors</declname>
        </param>
        <param>
          <type>const float *const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="55" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a8e6128e70a2d684fa9f9220a43496dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::hashSparseSerial</definition>
        <argsstring>(uint64_t num_vectors, const uint32_t *const *indices, const float *const *values, const uint32_t *lengths, uint32_t *output) const</argsstring>
        <name>hashSparseSerial</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashSparseSerial</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>num_vectors</declname>
        </param>
        <param>
          <type>const uint32_t *const *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const float *const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>lengths</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="63" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1ad2da319156cadf0f575fbeaa1f7964e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::hashDenseSerial</definition>
        <argsstring>(uint64_t num_vectors, const float *const *values, uint32_t dim, uint32_t *output) const</argsstring>
        <name>hashDenseSerial</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashDenseSerial</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>num_vectors</declname>
        </param>
        <param>
          <type>const float *const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="72" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a75a19fad0fc9c31bdcef6739e45f46f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashing::HashFunction::hashSingleSparse</definition>
        <argsstring>(const uint32_t *indices, const float *values, uint32_t length, uint32_t *output) const =0</argsstring>
        <name>hashSingleSparse</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashSingleSparse</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_densified_min_hash_1ac5b8f98915702da0d8b9c6d3dec87f74">hashSingleSparse</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function_1ae0bc679f9592b69676f6e79f17e1ca6b">hashSingleSparse</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_fast_s_r_p_1a45c30e0fa131a24dfc611e12196b1dc7">hashSingleSparse</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_sparse_random_projection_1ad3f0846acf9ec735a130e0d03d17ad2d">hashSingleSparse</reimplementedby>
        <param>
          <type>const uint32_t *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="79" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1af69c3a64e040b146ff95912c1716e9ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void thirdai::hashing::HashFunction::hashSingleDense</definition>
        <argsstring>(const float *values, uint32_t dim, uint32_t *output) const =0</argsstring>
        <name>hashSingleDense</name>
        <qualifiedname>thirdai::hashing::HashFunction::hashSingleDense</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_densified_min_hash_1a97868d9007db944dd7188fd67103eee0">hashSingleDense</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function_1aed549fb4e15a68d9b5a01b6e2ea75145">hashSingleDense</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_fast_s_r_p_1a0e0986f6c9562ca3eaa7483309c04dc9">hashSingleDense</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_sparse_random_projection_1a3fbce0332aea1f19b92bdfb59970514e">hashSingleDense</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="82" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1ad0dcbafbd5d0736c4bf4f3d57768cf85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::hashing::HashFunction::numTables</definition>
        <argsstring>() const</argsstring>
        <name>numTables</name>
        <qualifiedname>thirdai::hashing::HashFunction::numTables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="85" column="19" bodyfile="hashing/src/HashFunction.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a7a529c90222792d0a5965871320d80f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::hashing::HashFunction::range</definition>
        <argsstring>() const</argsstring>
        <name>range</name>
        <qualifiedname>thirdai::hashing::HashFunction::range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="87" column="19" bodyfile="hashing/src/HashFunction.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a387426f72f1671f670180af8245b6689" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classthirdai_1_1hashing_1_1_hash_function" kindref="compound">HashFunction</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt; HashFunction &gt; thirdai::hashing::HashFunction::copyWithNewSeeds</definition>
        <argsstring>() const =0</argsstring>
        <name>copyWithNewSeeds</name>
        <qualifiedname>thirdai::hashing::HashFunction::copyWithNewSeeds</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_densified_min_hash_1acaec1f827921151065957bfcaa1fdcf8">copyWithNewSeeds</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function_1a8d5da1495bf1a065f84417b37eadd8fa">copyWithNewSeeds</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_fast_s_r_p_1a7bf657326c47253f38a27358de24598d">copyWithNewSeeds</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_sparse_random_projection_1aea66c802f30be98c3db39b6d984f2d80">copyWithNewSeeds</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="89" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1abfeed87fcfdbe7a52a82c72b650a2374" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string thirdai::hashing::HashFunction::getName</definition>
        <argsstring>() const =0</argsstring>
        <name>getName</name>
        <qualifiedname>thirdai::hashing::HashFunction::getName</qualifiedname>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_densified_min_hash_1a9db89e4ca500f8e69e1c567ff8f8470f">getName</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function_1a691d61e2c9d42090e258af5fd9b2f524">getName</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_fast_s_r_p_1a82ecaff22d1a5928840f7d8394590ec5">getName</reimplementedby>
        <reimplementedby refid="classthirdai_1_1hashing_1_1_sparse_random_projection_1aa275d924bf312eddc37f5f0882892095">getName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="91" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1a12a8cd7e754bcfaef171a37f4ab45332" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual thirdai::hashing::HashFunction::~HashFunction</definition>
        <argsstring>()=default</argsstring>
        <name>~HashFunction</name>
        <qualifiedname>thirdai::hashing::HashFunction::~HashFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="93" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthirdai_1_1hashing_1_1_hash_function_1aab8442e9a7f5753b7ffdb0e851c9ecdf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void thirdai::hashing::HashFunction::serialize</definition>
        <argsstring>(Archive &amp;archive)</argsstring>
        <name>serialize</name>
        <qualifiedname>thirdai::hashing::HashFunction::serialize</qualifiedname>
        <param>
          <type>Archive &amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hashing/src/HashFunction.h" line="102" column="8" bodyfile="hashing/src/HashFunction.h" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>thirdai::hashing::DWTAHashFunction</label>
        <link refid="classthirdai_1_1hashing_1_1_d_w_t_a_hash_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>thirdai::hashing::DensifiedMinHash</label>
        <link refid="classthirdai_1_1hashing_1_1_densified_min_hash"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>thirdai::hashing::FastSRP</label>
        <link refid="classthirdai_1_1hashing_1_1_fast_s_r_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>thirdai::hashing::HashFunction</label>
        <link refid="classthirdai_1_1hashing_1_1_hash_function"/>
      </node>
      <node id="5">
        <label>thirdai::hashing::SparseRandomProjection</label>
        <link refid="classthirdai_1_1hashing_1_1_sparse_random_projection"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="hashing/src/HashFunction.h" line="9" column="1" bodyfile="hashing/src/HashFunction.h" bodystart="9" bodyend="105"/>
    <listofallmembers>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a57826915b34c6c12fa284f66b97bb7fa" prot="protected" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>_num_tables</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a0c52fac590ae2b63ba0c8bc7bd26f9d2" prot="protected" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>_range</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>cereal::access</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a387426f72f1671f670180af8245b6689" prot="public" virt="pure-virtual"><scope>thirdai::hashing::HashFunction</scope><name>copyWithNewSeeds</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1abfeed87fcfdbe7a52a82c72b650a2374" prot="public" virt="pure-virtual"><scope>thirdai::hashing::HashFunction</scope><name>getName</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a53b6aa78cf43f40af59c112261013624" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashBatchParallel</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a9cd2b24706d35c03f6ac35c70ae325d1" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashBatchParallel</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a6a05c22dab98b257e9b0cb22dad67c1d" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashDenseParallel</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1ad2da319156cadf0f575fbeaa1f7964e7" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashDenseSerial</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a6833c66f4e3044d7fd1283c11bbeb173" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>HashFunction</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1af69c3a64e040b146ff95912c1716e9ba" prot="public" virt="pure-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashSingleDense</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a75a19fad0fc9c31bdcef6739e45f46f8" prot="public" virt="pure-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashSingleSparse</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1aaff56129188ac9376f2647ab86a10f82" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashSparseParallel</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a8e6128e70a2d684fa9f9220a43496dee" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>hashSparseSerial</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1ad0dcbafbd5d0736c4bf4f3d57768cf85" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>numTables</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a7a529c90222792d0a5965871320d80f6" prot="public" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>range</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1aab8442e9a7f5753b7ffdb0e851c9ecdf" prot="private" virt="non-virtual"><scope>thirdai::hashing::HashFunction</scope><name>serialize</name></member>
      <member refid="classthirdai_1_1hashing_1_1_hash_function_1a12a8cd7e754bcfaef171a37f4ab45332" prot="public" virt="virtual"><scope>thirdai::hashing::HashFunction</scope><name>~HashFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
