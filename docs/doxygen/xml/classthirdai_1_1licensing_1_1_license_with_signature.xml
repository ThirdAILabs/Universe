<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classthirdai_1_1licensing_1_1_license_with_signature" kind="class" language="C++" prot="public">
    <compoundname>thirdai::licensing::LicenseWithSignature</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classthirdai_1_1licensing_1_1_license_with_signature_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::access</qualifiedname>
        <param>
          <type>cereal::access</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="144" column="16" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classthirdai_1_1licensing_1_1_license_with_signature_1aa1442b6a533f471a535462d50c4dc14a" prot="private" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string thirdai::licensing::LicenseWithSignature::PUBLIC_KEY_BASE_64</definition>
        <argsstring></argsstring>
        <name>PUBLIC_KEY_BASE_64</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::PUBLIC_KEY_BASE_64</qualifiedname>
        <initializer>=
      &quot;MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAsIv9g8w+&quot;
      &quot;DLlepzpE02luu6lV2DY7g5N0cnqhbaoArE5UOEiKK2EFPCeQTp8+TkYk64/&quot;
      &quot;ieMab4CoIU3ZmVp5GUyKkWsLJhDUE3dXJrLhIDTg7HFr6qwrFDosRWI26grq+&quot;
      &quot;CFPsiVLTjlJCd+7sv1EtR5TPhympKAKRbUI1pffnK8QTJ8F5Bfg/&quot;
      &quot;1tLHk3lpUp4vF90se0TWgmXe7CW6GtWeXqiwsfzK9IzkgLbX4DQJnyIRPS9MLoQr/&quot;
      &quot;nSws7jMPDtUIuSjUIOQojxIhxTO5iL+&quot;
      &quot;mfiV2h7nRLMtJM6lLKmrDK09sE4geE8zJytCcP1l15s7gZy7g7i1mwrpfiulmfNVvDj0LoKY&quot;
      &quot;D2&quot;
      &quot;nx1mj+gCgnUasqLWILNUXgV19eGGLd23+&quot;
      &quot;hc7NzF10KFVXIcLebrG7o6WfFY5NSYu2pDzialgpCXmiysyIKj/HXY1hpbi0/dMII/&quot;
      &quot;lVN2QhDb5zTVIjzBr+kMuJ9dNNl9Sn4eso+dMNjQrQ2F9WvcgS1ZQ4Ju/5qOZrRAgMBAAE=&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="150" column="35" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthirdai_1_1licensing_1_1_license_with_signature_1ab1961b20747f53cf3a0d14331766cc5d" prot="private" static="no" mutable="no">
        <type><ref refid="classthirdai_1_1licensing_1_1_license" kindref="compound">License</ref></type>
        <definition>License thirdai::licensing::LicenseWithSignature::_license</definition>
        <argsstring></argsstring>
        <name>_license</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::_license</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="311" column="11" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1licensing_1_1_license_with_signature_1afe9179817117ce60ae753490b45c198a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string thirdai::licensing::LicenseWithSignature::_signature</definition>
        <argsstring></argsstring>
        <name>_signature</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::_signature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="312" column="15" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1aed7541e9dbbd169894481616cb0355b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>thirdai::licensing::LicenseWithSignature::LicenseWithSignature</definition>
        <argsstring>()</argsstring>
        <name>LicenseWithSignature</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::LicenseWithSignature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="30" column="3" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a29ce4d5ac9b23940703d9c1bd6603823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>thirdai::licensing::LicenseWithSignature::LicenseWithSignature</definition>
        <argsstring>(License license, const CryptoPP::RSA::PrivateKey &amp;private_key)</argsstring>
        <name>LicenseWithSignature</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::LicenseWithSignature</qualifiedname>
        <param>
          <type><ref refid="classthirdai_1_1licensing_1_1_license" kindref="compound">License</ref></type>
          <declname>license</declname>
        </param>
        <param>
          <type>const CryptoPP::RSA::PrivateKey &amp;</type>
          <declname>private_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="32" column="3" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="32" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1af1640ea286b42edcea06854ff06b1f5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool thirdai::licensing::LicenseWithSignature::verify</definition>
        <argsstring>(const CryptoPP::RSA::PublicKey &amp;public_key) const</argsstring>
        <name>verify</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::verify</qualifiedname>
        <param>
          <type>const CryptoPP::RSA::PublicKey &amp;</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="65" column="8" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="65" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a10e78ca844b48443e26ba33d9fe1f6a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::licensing::LicenseWithSignature::serializeToFile</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>serializeToFile</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::serializeToFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="98" column="8" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a3c20894ae265a26d9b7edd4cc2952ac6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classthirdai_1_1licensing_1_1_license" kindref="compound">License</ref> &amp;</type>
        <definition>const License &amp; thirdai::licensing::LicenseWithSignature::get_license</definition>
        <argsstring>() const</argsstring>
        <name>get_license</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_license</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="137" column="17" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1afd65a3795807bd56a85bf3caf52cb106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::licensing::LicenseWithSignature::set_license</definition>
        <argsstring>(License new_license)</argsstring>
        <name>set_license</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::set_license</qualifiedname>
        <param>
          <type><ref refid="classthirdai_1_1licensing_1_1_license" kindref="compound">License</ref></type>
          <declname>new_license</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="140" column="8" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="140" bodyend="140"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1ac1d1848b4f66d98aa29b25203420f739" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classthirdai_1_1licensing_1_1_license_with_signature" kindref="compound">LicenseWithSignature</ref></type>
        <definition>static LicenseWithSignature thirdai::licensing::LicenseWithSignature::deserializeFromFile</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>deserializeFromFile</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::deserializeFromFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="104" column="31" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1ae9568b3b045a5f2f8181c790ed95c980" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void thirdai::licensing::LicenseWithSignature::findVerifyAndCheckLicense</definition>
        <argsstring>(const std::optional&lt; std::string &gt; &amp;license_path)</argsstring>
        <name>findVerifyAndCheckLicense</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::findVerifyAndCheckLicense</qualifiedname>
        <param>
          <type>const std::optional&lt; std::string &gt; &amp;</type>
          <declname>license_path</declname>
        </param>
        <briefdescription>
<para>Checks for a license file in the following order 0. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in license path<orderedlist>
<listitem><para>env(THIRDAI_LICENSE_PATH)</para>
</listitem><listitem><para>~/license.serialized</para>
</listitem><listitem><para>{cwd}/license.serialized Uses the first file found. If no license is found, we throw an error. If a license is found we verify it with the passed in public key, then check whether it has expired. If either check fails we throw an error. Otherwise we just return. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="126" column="15" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="126" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1aba22d288c977d57d5242b565820a4bf6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void thirdai::licensing::LicenseWithSignature::serialize</definition>
        <argsstring>(Archive &amp;archive)</argsstring>
        <name>serialize</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::serialize</qualifiedname>
        <param>
          <type>Archive &amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="146" column="8" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="146" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1abfd4d29e79b6306005f6d7046a3ef506" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; thirdai::licensing::LicenseWithSignature::get_license_name_options</definition>
        <argsstring>(const std::optional&lt; std::string &gt; &amp;license_path)</argsstring>
        <name>get_license_name_options</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_license_name_options</qualifiedname>
        <param>
          <type>const std::optional&lt; std::string &gt; &amp;</type>
          <declname>license_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="172" column="22" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="172" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a92139f22b9f54a150e63cf7424a4582c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classthirdai_1_1licensing_1_1_license_with_signature" kindref="compound">LicenseWithSignature</ref>, std::string &gt;</type>
        <definition>static std::pair&lt; LicenseWithSignature, std::string &gt; thirdai::licensing::LicenseWithSignature::get_license_from_options</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;license_file_name_options)</argsstring>
        <name>get_license_from_options</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_license_from_options</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>license_file_name_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="206" column="20" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="206" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1ae8e66d4a733b08a252239ce699d84c74" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void thirdai::licensing::LicenseWithSignature::verify_and_check_license</definition>
        <argsstring>(const std::pair&lt; LicenseWithSignature, std::string &gt; &amp;license_with_file)</argsstring>
        <name>verify_and_check_license</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::verify_and_check_license</qualifiedname>
        <param>
          <type>const std::pair&lt; <ref refid="classthirdai_1_1licensing_1_1_license_with_signature" kindref="compound">LicenseWithSignature</ref>, std::string &gt; &amp;</type>
          <declname>license_with_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="235" column="15" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="235" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a8bb2d41672bc4c5c3ffde107f4667bd8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool thirdai::licensing::LicenseWithSignature::can_access_file</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>can_access_file</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::can_access_file</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="256" column="15" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a17a0475c475149cb155709d750397733" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>static std::optional&lt; std::string &gt; thirdai::licensing::LicenseWithSignature::get_license_path_from_environment</definition>
        <argsstring>()</argsstring>
        <name>get_license_path_from_environment</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_license_path_from_environment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="261" column="24" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="261" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1ab5eaef100c153501a87d02cee6d59766" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>static std::optional&lt; std::string &gt; thirdai::licensing::LicenseWithSignature::get_current_directory</definition>
        <argsstring>()</argsstring>
        <name>get_current_directory</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_current_directory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="271" column="24" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="271" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1a564144386efcba1c382a97af47369d9b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>static std::optional&lt; std::string &gt; thirdai::licensing::LicenseWithSignature::get_home_directory</definition>
        <argsstring>()</argsstring>
        <name>get_home_directory</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_home_directory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="280" column="24" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="280" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1licensing_1_1_license_with_signature_1abd79a583b820c44417e1ff6177b079cf" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>static std::optional&lt; std::string &gt; thirdai::licensing::LicenseWithSignature::get_home_directory_windows</definition>
        <argsstring>()</argsstring>
        <name>get_home_directory_windows</name>
        <qualifiedname>thirdai::licensing::LicenseWithSignature::get_home_directory_windows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="licensing/src/LicenseWithSignature.h" line="296" column="24" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="296" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="licensing/src/LicenseWithSignature.h" line="26" column="1" bodyfile="licensing/src/LicenseWithSignature.h" bodystart="26" bodyend="313"/>
    <listofallmembers>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ab1961b20747f53cf3a0d14331766cc5d" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>_license</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1afe9179817117ce60ae753490b45c198a" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>_signature</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a8bb2d41672bc4c5c3ffde107f4667bd8" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>can_access_file</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>cereal::access</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ac1d1848b4f66d98aa29b25203420f739" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>deserializeFromFile</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ae9568b3b045a5f2f8181c790ed95c980" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>findVerifyAndCheckLicense</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ab5eaef100c153501a87d02cee6d59766" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_current_directory</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a564144386efcba1c382a97af47369d9b" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_home_directory</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1abd79a583b820c44417e1ff6177b079cf" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_home_directory_windows</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a3c20894ae265a26d9b7edd4cc2952ac6" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_license</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a92139f22b9f54a150e63cf7424a4582c" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_license_from_options</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1abfd4d29e79b6306005f6d7046a3ef506" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_license_name_options</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a17a0475c475149cb155709d750397733" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>get_license_path_from_environment</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1aed7541e9dbbd169894481616cb0355b0" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>LicenseWithSignature</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a29ce4d5ac9b23940703d9c1bd6603823" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>LicenseWithSignature</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1aa1442b6a533f471a535462d50c4dc14a" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>PUBLIC_KEY_BASE_64</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1aba22d288c977d57d5242b565820a4bf6" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>serialize</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1a10e78ca844b48443e26ba33d9fe1f6a0" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>serializeToFile</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1afd65a3795807bd56a85bf3caf52cb106" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>set_license</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1af1640ea286b42edcea06854ff06b1f5b" prot="public" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>verify</name></member>
      <member refid="classthirdai_1_1licensing_1_1_license_with_signature_1ae8e66d4a733b08a252239ce699d84c74" prot="private" virt="non-virtual"><scope>thirdai::licensing::LicenseWithSignature</scope><name>verify_and_check_license</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
