<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_serializer_8h" kind="file" language="C++">
    <compoundname>Serializer.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">cstring</includes>
    <includes local="no">vector</includes>
    <includedby refid="_count_sketch_8cc" local="yes">compression/src/CountSketch.cc</includedby>
    <includedby refid="_dragon_vector_8cc" local="yes">compression/src/DragonVector.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>compression/src/Serializer.h</label>
        <link refid="_serializer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>cstring</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classthirdai_1_1compression_1_1serializer_1_1_binary_input_helper" prot="public">thirdai::compression::serializer::BinaryInputHelper</innerclass>
    <innerclass refid="classthirdai_1_1compression_1_1serializer_1_1_binary_output_helper" prot="public">thirdai::compression::serializer::BinaryOutputHelper</innerclass>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1compression">thirdai::compression</innernamespace>
    <innernamespace refid="namespacethirdai_1_1compression_1_1serializer">thirdai::compression::serializer</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::compression::serializer<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>helper<sp/>classes<sp/>to<sp/>serialize<sp/>and<sp/>deserialize<sp/>c++<sp/>objects.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>InputHelper<sp/>takes<sp/>in<sp/>a<sp/>char<sp/>array<sp/>that<sp/>already<sp/>has<sp/>serialized<sp/>data<sp/>stored<sp/>in</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>it<sp/>and<sp/>helps<sp/>in<sp/>reading<sp/>data<sp/>from<sp/>it.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>OutputHelper<sp/>takes<sp/>in<sp/>a<sp/>char<sp/>array(let&apos;s<sp/>call<sp/>it<sp/>serialized_data)<sp/>with<sp/>memory</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>already<sp/>allocated<sp/>to<sp/>it<sp/>and<sp/>writes<sp/>data<sp/>onto<sp/>this<sp/>memory.<sp/>Your<sp/>object<sp/>should</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>return<sp/>serialized_data<sp/>as<sp/>the<sp/>memory<sp/>pointed<sp/>to<sp/>by<sp/>serialized_data<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>place<sp/>where<sp/>helper<sp/>writes<sp/>the<sp/>object<sp/>data.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Note:<sp/>These<sp/>are<sp/>just<sp/>helper<sp/>classes<sp/>and<sp/>do<sp/>not<sp/>&quot;own&quot;<sp/>the<sp/>data<sp/>as<sp/>such<sp/>and</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>locally<sp/>by<sp/>a<sp/>function.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Why<sp/>not<sp/>cereal?</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>From<sp/>the<sp/>docs:<sp/>&quot;cereal<sp/>archives<sp/>operate<sp/>on<sp/>either<sp/>an<sp/>std::ostream<sp/>or</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>std::istream<sp/>object&quot;.<sp/>After<sp/>writing<sp/>data<sp/>on<sp/>a<sp/>stream,<sp/>we<sp/>need<sp/>to<sp/>transfer<sp/>the</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>data<sp/>to<sp/>python<sp/>without<sp/>copying.<sp/>This<sp/>is<sp/>hard<sp/>to<sp/>implement<sp/>with<sp/>streams.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>TODO(Shubh):<sp/>Transfer<sp/>cereal<sp/>data<sp/>to<sp/>python<sp/>without<sp/>copying.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classthirdai_1_1compression_1_1serializer_1_1_binary_input_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1compression_1_1serializer_1_1_binary_input_helper" kindref="compound">BinaryInputHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1compression_1_1serializer_1_1_binary_input_helper" kindref="compound">BinaryInputHelper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)<sp/>:<sp/>_ptr(data)<sp/>{}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read(T*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(data,<sp/>_ptr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>_ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readVector(std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>size;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>read(&amp;size);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>vector.resize(size);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(vector.data(),<sp/>_ptr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>_ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_ptr;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classthirdai_1_1compression_1_1serializer_1_1_binary_output_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1compression_1_1serializer_1_1_binary_output_helper" kindref="compound">BinaryOutputHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1compression_1_1serializer_1_1_binary_output_helper" kindref="compound">BinaryOutputHelper</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)<sp/>:<sp/>_ptr(data)<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(_ptr,<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>_ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeVector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>vector)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>size<sp/>=<sp/>vector.size();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>write(&amp;size);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(_ptr,<sp/>vector.data(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>_ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_ptr;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::compression::serializer</highlight></codeline>
    </programlisting>
    <location file="compression/src/Serializer.h"/>
  </compounddef>
</doxygen>
