<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_in_memory_dataset_8h" kind="file" language="C++">
    <compoundname>InMemoryDataset.h</compoundname>
    <includes local="no">cereal/access.hpp</includes>
    <includes local="no">cereal/archives/binary.hpp</includes>
    <includes local="no">cereal/types/base_class.hpp</includes>
    <includes local="no">cereal/types/polymorphic.hpp</includes>
    <includes local="no">cereal/types/vector.hpp</includes>
    <includes refid="_safe_file_i_o_8h" local="yes">utils/SafeFileIO.h</includes>
    <includes refid="_bolt_vector_8h" local="no">bolt_vector/src/BoltVector.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">optional</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="_dataset_loaders_8h" local="yes">dataset/src/DatasetLoaders.h</includedby>
    <includedby refid="_datasets_8h" local="yes">dataset/src/Datasets.h</includedby>
    <includedby refid="_numpy_dataset_8h" local="yes">dataset/src/NumpyDataset.h</includedby>
    <includedby refid="_streaming_dataset_8h" local="no">dataset/src/StreamingDataset.h</includedby>
    <includedby refid="_max_flash_8h" local="no">search/src/MaxFlash.h</includedby>
    <includedby refid="_max_flash_array_8h" local="no">search/src/MaxFlashArray.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>bolt_vector/src/BoltVector.h</label>
        <link refid="_bolt_vector_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dataset/src/InMemoryDataset.h</label>
        <link refid="_in_memory_dataset_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>utils/SafeFileIO.h</label>
        <link refid="_safe_file_i_o_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="2">
        <label>cereal/access.hpp</label>
      </node>
      <node id="3">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="10">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="4">
        <label>cereal/types/base_class.hpp</label>
      </node>
      <node id="5">
        <label>cereal/types/polymorphic.hpp</label>
      </node>
      <node id="6">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="24">
        <label>memory</label>
      </node>
      <node id="16">
        <label>numeric</label>
      </node>
      <node id="17">
        <label>optional</label>
      </node>
      <node id="18">
        <label>queue</label>
      </node>
      <node id="19">
        <label>sstream</label>
      </node>
      <node id="20">
        <label>stdexcept</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="23">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>bolt/src/auto_classifiers/AutoClassifierBase.h</label>
        <link refid="_auto_classifier_base_8h_source"/>
      </node>
      <node id="8">
        <label>bolt/src/auto_classifiers/sequential_classifier/SequentialClassifier.h</label>
        <link refid="_sequential_classifier_8h_source"/>
      </node>
      <node id="17">
        <label>bolt/src/auto_classifiers/sequential_classifier/SequentialUtils.h</label>
        <link refid="_sequential_utils_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>bolt/src/graph/CommonNetworks.h</label>
        <link refid="_common_networks_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bolt/src/graph/DatasetContext.h</label>
        <link refid="_dataset_context_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>bolt/src/graph/DistributedTrainingWrapper.h</label>
        <link refid="_distributed_training_wrapper_8h_source"/>
      </node>
      <node id="13">
        <label>bolt/src/graph/ExecutionConfig.h</label>
        <link refid="_execution_config_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>bolt/src/graph/Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>bolt/src/graph/callbacks/EarlyStopCheckpoint.h</label>
        <link refid="_early_stop_checkpoint_8h_source"/>
      </node>
      <node id="11">
        <label>bolt/src/graph/callbacks/LearningRateScheduler.h</label>
        <link refid="_learning_rate_scheduler_8h_source"/>
      </node>
      <node id="12">
        <label>bolt/src/root_cause_analysis/RootCauseAnalysis.h</label>
        <link refid="_root_cause_analysis_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dataset/src/DatasetLoaders.h</label>
        <link refid="_dataset_loaders_8h_source"/>
      </node>
      <node id="3">
        <label>dataset/src/Datasets.h</label>
        <link refid="_datasets_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dataset/src/InMemoryDataset.h</label>
        <link refid="_in_memory_dataset_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>dataset/src/NumpyDataset.h</label>
        <link refid="_numpy_dataset_8h_source"/>
      </node>
      <node id="15">
        <label>dataset/src/ShuffleBatchBuffer.h</label>
        <link refid="_shuffle_batch_buffer_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>dataset/src/StreamingDataset.h</label>
        <link refid="_streaming_dataset_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>dataset/src/StreamingGenericDatasetLoader.h</label>
        <link refid="_streaming_generic_dataset_loader_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>dataset/src/core/BlockBatchProcessor.h</label>
        <link refid="_block_batch_processor_8h_source"/>
      </node>
      <node id="22">
        <label>search/src/DocSearch.h</label>
        <link refid="_doc_search_8h_source"/>
      </node>
      <node id="20">
        <label>search/src/MaxFlash.h</label>
        <link refid="_max_flash_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>search/src/MaxFlashArray.h</label>
        <link refid="_max_flash_array_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classthirdai_1_1dataset_1_1_dataset_base" prot="public">thirdai::dataset::DatasetBase</innerclass>
    <innerclass refid="classthirdai_1_1dataset_1_1_in_memory_dataset" prot="public">thirdai::dataset::InMemoryDataset</innerclass>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1dataset">thirdai::dataset</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/access.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/archives/binary.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/base_class.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/polymorphic.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cereal/types/vector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/SafeFileIO.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bolt_vector/src/BoltVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::dataset<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classthirdai_1_1dataset_1_1_dataset_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1dataset_1_1_dataset_base" kindref="compound">DatasetBase</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="classthirdai_1_1dataset_1_1_dataset_base" kindref="compound">DatasetBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>len()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>batchSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>batchSize(uint64_t<sp/>batch_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>numBatches()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1dataset_1_1_dataset_base" kindref="compound">~DatasetBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cereal::access;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>archive)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)archive;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DatasetBasePtr<sp/>=<sp/>std::shared_ptr&lt;DatasetBase&gt;;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">DatasetBaseList<sp/>=<sp/>std::vector&lt;DatasetBasePtr&gt;;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BATCH_T&gt;</highlight></codeline>
<codeline lineno="46" refid="classthirdai_1_1dataset_1_1_in_memory_dataset" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classthirdai_1_1dataset_1_1_in_memory_dataset" kindref="compound">InMemoryDataset</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1dataset_1_1_dataset_base" kindref="compound">DatasetBase</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>r-value<sp/>reference<sp/>for<sp/>batches<sp/>to<sp/>force<sp/>a<sp/>move.<sp/>len<sp/>is<sp/>the<sp/>total<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>dataset.<sp/>We<sp/>move<sp/>into<sp/>_batches<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>batches<sp/>are<sp/>moved<sp/>into<sp/>the<sp/>constructor<sp/>they<sp/>get<sp/>moved<sp/>into<sp/>the<sp/>field<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>class.<sp/>Otherwise<sp/>c++<sp/>will<sp/>copy<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classthirdai_1_1dataset_1_1_in_memory_dataset" kindref="compound">InMemoryDataset</ref>(std::vector&lt;BATCH_T&gt;&amp;&amp;<sp/>batches)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_batches(std::move(batches))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_batches.empty())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>pass<sp/>in<sp/>at<sp/>least<sp/>one<sp/>batch<sp/>to<sp/>the<sp/>dataset<sp/>constructor<sp/>but<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>_batch_size<sp/>=<sp/>_batches.front().getBatchSize();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_batch_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>batch<sp/>was<sp/>found<sp/>to<sp/>have<sp/>an<sp/>invalid<sp/>length<sp/>of<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>_batches.size()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>current_batch_size<sp/>=<sp/>_batches.at(i).getBatchSize();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_batch_size<sp/>!=<sp/>_batch_size)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>batches<sp/>but<sp/>the<sp/>last<sp/>batch<sp/>must<sp/>have<sp/>the<sp/>same<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>last_batch_size<sp/>=<sp/>_batches.back().getBatchSize();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_batch_size<sp/>&gt;<sp/>_batch_size)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>last<sp/>batch<sp/>in<sp/>the<sp/>dataset<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>others,<sp/>when<sp/>it<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;should<sp/>be<sp/>equal<sp/>to<sp/>or<sp/>smaller<sp/>than<sp/>them<sp/>in<sp/>length.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_batch_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>last<sp/>batch<sp/>was<sp/>found<sp/>to<sp/>have<sp/>an<sp/>invalid<sp/>length<sp/>of<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>_len<sp/>=<sp/>_batch_size<sp/>*<sp/>(_batches.size()<sp/>-<sp/>1)<sp/>+<sp/>last_batch_size;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BATCH_T&amp;<sp/>operator[](uint64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches[i];<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>BATCH_T&amp;<sp/>operator[](uint64_t<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches[i];<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BATCH_T&amp;<sp/>at(uint64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches.at(i);<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>BATCH_T&amp;<sp/>at(uint64_t<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches.at(i);<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches.begin();<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches.end();<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>uint64_t<sp/>numBatches()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches.size();<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>uint64_t<sp/>len()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_len;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>batch<sp/>size<sp/>can<sp/>be<sp/>less<sp/>than<sp/>this<sp/>(but<sp/>only<sp/>if<sp/>there<sp/>is<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>batch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>uint64_t<sp/>batchSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batch_size;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>uint64_t<sp/>batchSize(uint64_t<sp/>batch_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batches[batch_idx].getBatchSize();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;InMemoryDataset&lt;BATCH_T&gt;&gt;<sp/>load(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>filestream<sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset::SafeFileIO::ifstream(filename,<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>cereal::BinaryInputArchive<sp/>iarchive(filestream);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deserialize_into<sp/>=<sp/>std::make_shared&lt;InMemoryDataset&lt;BATCH_T&gt;&gt;();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>iarchive(*deserialize_into);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deserialize_into;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>save(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>filestream<sp/>=</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset::SafeFileIO::ofstream(filename,<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>cereal::BinaryOutputArchive<sp/>oarchive(filestream);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>oarchive(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classthirdai_1_1dataset_1_1_in_memory_dataset" kindref="compound">InMemoryDataset</ref>()<sp/>:<sp/>_len(0),<sp/>_batch_size(0)<sp/>{}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Private<sp/>constructor<sp/>for<sp/>cereal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cereal::access;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>archive)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>archive(cereal::base_class&lt;DatasetBase&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>_batches,<sp/>_len,<sp/>_batch_size);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>std::vector&lt;BATCH_T&gt;<sp/>_batches;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>uint64_t<sp/>_len;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>uint64_t<sp/>_batch_size;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::dataset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">CEREAL_REGISTER_TYPE(<ref refid="classthirdai_1_1dataset_1_1_in_memory_dataset" kindref="compound">thirdai::dataset::InMemoryDataset&lt;thirdai::BoltBatch&gt;</ref>)</highlight></codeline>
    </programlisting>
    <location file="dataset/src/InMemoryDataset.h"/>
  </compounddef>
</doxygen>
