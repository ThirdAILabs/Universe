<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classthirdai_1_1compression_1_1_dragon_vector" kind="class" language="C++" prot="public" final="yes">
    <compoundname>thirdai::compression::DragonVector</compoundname>
    <basecompoundref refid="classthirdai_1_1compression_1_1_compressed_vector" prot="public" virt="non-virtual">thirdai::compression::CompressedVector&lt; T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthirdai_1_1compression_1_1_dragon_vector_1a4009d87f1bb314f7c2e5493d36f6b3f2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt;uint32_t&gt; thirdai::compression::DragonVector&lt; T &gt;::_indices</definition>
        <argsstring></argsstring>
        <name>_indices</name>
        <qualifiedname>thirdai::compression::DragonVector::_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="68" column="15" bodyfile="compression/src/DragonVector.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1compression_1_1_dragon_vector_1ab61145ba06bdae7c78b15e75b59cd522" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; thirdai::compression::DragonVector&lt; T &gt;::_values</definition>
        <argsstring></argsstring>
        <name>_values</name>
        <qualifiedname>thirdai::compression::DragonVector::_values</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="69" column="15" bodyfile="compression/src/DragonVector.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1compression_1_1_dragon_vector_1aa197b66def7da1e580b2afc3ee77e0c4" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::_min_sketch_size</definition>
        <argsstring></argsstring>
        <name>_min_sketch_size</name>
        <qualifiedname>thirdai::compression::DragonVector::_min_sketch_size</qualifiedname>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="70" column="12" bodyfile="compression/src/DragonVector.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1compression_1_1_dragon_vector_1a0dc9c193bccb604c3410bba99c0f0980" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::_uncompressed_size</definition>
        <argsstring></argsstring>
        <name>_uncompressed_size</name>
        <qualifiedname>thirdai::compression::DragonVector::_uncompressed_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="73" column="12" bodyfile="compression/src/DragonVector.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthirdai_1_1compression_1_1_dragon_vector_1a318cf63292612c7f6e2f131214fa786e" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::_seed_for_hashing</definition>
        <argsstring></argsstring>
        <name>_seed_for_hashing</name>
        <qualifiedname>thirdai::compression::DragonVector::_seed_for_hashing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="75" column="12" bodyfile="compression/src/DragonVector.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a078acfebfdabaab83387affbdadec5e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>thirdai::compression::DragonVector&lt; T &gt;::DragonVector</definition>
        <argsstring>()</argsstring>
        <name>DragonVector</name>
        <qualifiedname>thirdai::compression::DragonVector::DragonVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="19" column="3" bodyfile="compression/src/DragonVector.h" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1ac3b2fb9bd0bfcc63930fdbe3d65480f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thirdai::compression::DragonVector&lt; T &gt;::DragonVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vector_to_compress, float compression_density, uint32_t seed_for_hashing, uint32_t sample_population_size)</argsstring>
        <name>DragonVector</name>
        <qualifiedname>thirdai::compression::DragonVector::DragonVector</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vector_to_compress</declname>
        </param>
        <param>
          <type>float</type>
          <declname>compression_density</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed_for_hashing</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sample_population_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="21" column="3" bodyfile="compression/src/DragonVector.cc" bodystart="18" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1aa2b2d5c3c8631d0450d6de0016cf3607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thirdai::compression::DragonVector&lt; T &gt;::DragonVector</definition>
        <argsstring>(const T *values_to_compress, uint32_t size, float compression_density, uint32_t seed_for_hashing, uint32_t sample_population_size)</argsstring>
        <name>DragonVector</name>
        <qualifiedname>thirdai::compression::DragonVector::DragonVector</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>values_to_compress</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>float</type>
          <declname>compression_density</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed_for_hashing</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sample_population_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="25" column="3" bodyfile="compression/src/DragonVector.cc" bodystart="28" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1ad5e0995eccc401863c73e0af8fea9017" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>thirdai::compression::DragonVector&lt; T &gt;::DragonVector</definition>
        <argsstring>(const char *serialized_data)</argsstring>
        <name>DragonVector</name>
        <qualifiedname>thirdai::compression::DragonVector::DragonVector</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>serialized_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="29" column="12" bodyfile="compression/src/DragonVector.cc" bodystart="177" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1aa35283d3a1e0a761adf02cbc1306bdcf" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>T</type>
        <definition>T thirdai::compression::DragonVector&lt; T &gt;::get</definition>
        <argsstring>(uint32_t index) const final</argsstring>
        <name>get</name>
        <qualifiedname>thirdai::compression::DragonVector::get</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a6da0f4103a7b8cccc3c714a023b55ec1">get</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="31" column="5" bodyfile="compression/src/DragonVector.cc" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1abd3b850a3deb279e31b792f68993df1b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void thirdai::compression::DragonVector&lt; T &gt;::set</definition>
        <argsstring>(uint32_t index, T value) final</argsstring>
        <name>set</name>
        <qualifiedname>thirdai::compression::DragonVector::set</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a3af71cf93ecff56348e32d72c26991d8">set</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="33" column="8" bodyfile="compression/src/DragonVector.cc" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1afa99a184d8582739b54c996898b43275" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void thirdai::compression::DragonVector&lt; T &gt;::clear</definition>
        <argsstring>() final</argsstring>
        <name>clear</name>
        <qualifiedname>thirdai::compression::DragonVector::clear</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1aa6e9cec24fc7e0c610429ac6a6bef9db">clear</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="35" column="8" bodyfile="compression/src/DragonVector.cc" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1afb083dab98c90156d93cd2d11f6ce132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::compression::DragonVector&lt; T &gt;::extend</definition>
        <argsstring>(const DragonVector&lt; T &gt; &amp;vec)</argsstring>
        <name>extend</name>
        <qualifiedname>thirdai::compression::DragonVector::extend</qualifiedname>
        <param>
          <type>const <ref refid="classthirdai_1_1compression_1_1_dragon_vector" kindref="compound">DragonVector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="41" column="8" bodyfile="compression/src/DragonVector.cc" bodystart="114" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a7bded0ff8533fa56fffd75a31f1f00b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; thirdai::compression::DragonVector&lt; T &gt;::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <qualifiedname>thirdai::compression::DragonVector::indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="43" column="15" bodyfile="compression/src/DragonVector.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a6b38a9eca7d278ea8c174bca792d723f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; thirdai::compression::DragonVector&lt; T &gt;::values</definition>
        <argsstring>() const</argsstring>
        <name>values</name>
        <qualifiedname>thirdai::compression::DragonVector::values</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="45" column="15" bodyfile="compression/src/DragonVector.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a4058fdddb77e36547da0035f6e1510b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::seedForHashing</definition>
        <argsstring>() const</argsstring>
        <name>seedForHashing</name>
        <qualifiedname>thirdai::compression::DragonVector::seedForHashing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="47" column="12" bodyfile="compression/src/DragonVector.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1ae304b188b419edebf59134b43ea15480" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::uncompressedSize</definition>
        <argsstring>() const final</argsstring>
        <name>uncompressedSize</name>
        <qualifiedname>thirdai::compression::DragonVector::uncompressedSize</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a330e6e04aff6318af877112bdb8e2d42">uncompressedSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="49" column="12" bodyfile="compression/src/DragonVector.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1acc434501e8421fcce5532a32ab4c72f8" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::size</definition>
        <argsstring>() const final</argsstring>
        <name>size</name>
        <qualifiedname>thirdai::compression::DragonVector::size</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a78c35dba3c7ed7cd801a01c7c83358ab">size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="51" column="12" bodyfile="compression/src/DragonVector.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1aa5a962896c7f9fdd0dc45f3be963916d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>CompressionScheme</type>
        <definition>CompressionScheme thirdai::compression::DragonVector&lt; T &gt;::type</definition>
        <argsstring>() const final</argsstring>
        <name>type</name>
        <qualifiedname>thirdai::compression::DragonVector::type</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a6d2b109a3fa11c059faa1d244ce11e5f">type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="53" column="21" bodyfile="compression/src/DragonVector.cc" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a07e4576091e333d8f0220380f54980d8" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; thirdai::compression::DragonVector&lt; T &gt;::decompress</definition>
        <argsstring>() const final</argsstring>
        <name>decompress</name>
        <qualifiedname>thirdai::compression::DragonVector::decompress</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a2bedb8405b027b71cfb7d6b47fd4d90e">decompress</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="55" column="15" bodyfile="compression/src/DragonVector.cc" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1ad191c87658d8ac1af5f3997ce6bd5c0d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void thirdai::compression::DragonVector&lt; T &gt;::serialize</definition>
        <argsstring>(char *serialized_data) const final</argsstring>
        <name>serialize</name>
        <qualifiedname>thirdai::compression::DragonVector::serialize</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a8e0dbf7a71124b4faae63fd58c887387">serialize</reimplements>
        <param>
          <type>char *</type>
          <declname>serialized_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="57" column="8" bodyfile="compression/src/DragonVector.cc" bodystart="160" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1aaf6c8566080509b82fd898d9deebcad6" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t thirdai::compression::DragonVector&lt; T &gt;::serialized_size</definition>
        <argsstring>() const final</argsstring>
        <name>serialized_size</name>
        <qualifiedname>thirdai::compression::DragonVector::serialized_size</qualifiedname>
        <reimplements refid="classthirdai_1_1compression_1_1_compressed_vector_1a19d5825d6f10469657b0376393b732d2">serialized_size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="59" column="12" bodyfile="compression/src/DragonVector.cc" bodystart="199" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthirdai_1_1compression_1_1_dragon_vector_1a9a6a7f291f180d389588f7994c4fa245" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thirdai::compression::DragonVector&lt; T &gt;::sketch</definition>
        <argsstring>(const T *values, T threshold, uint32_t size, uint32_t sketch_size)</argsstring>
        <name>sketch</name>
        <qualifiedname>thirdai::compression::DragonVector::sketch</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>T</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sketch_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compression/src/DragonVector.h" line="77" column="8" bodyfile="compression/src/DragonVector.cc" bodystart="56" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>thirdai::compression::CompressedVector&lt; T &gt;</label>
        <link refid="classthirdai_1_1compression_1_1_compressed_vector"/>
      </node>
      <node id="1">
        <label>thirdai::compression::DragonVector&lt; T &gt;</label>
        <link refid="classthirdai_1_1compression_1_1_dragon_vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>thirdai::compression::CompressedVector&lt; T &gt;</label>
        <link refid="classthirdai_1_1compression_1_1_compressed_vector"/>
      </node>
      <node id="1">
        <label>thirdai::compression::DragonVector&lt; T &gt;</label>
        <link refid="classthirdai_1_1compression_1_1_dragon_vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="compression/src/DragonVector.h" line="15" column="1" bodyfile="compression/src/DragonVector.h" bodystart="15" bodyend="79"/>
    <listofallmembers>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a4009d87f1bb314f7c2e5493d36f6b3f2" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>_indices</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1aa197b66def7da1e580b2afc3ee77e0c4" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>_min_sketch_size</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a318cf63292612c7f6e2f131214fa786e" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>_seed_for_hashing</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a0dc9c193bccb604c3410bba99c0f0980" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>_uncompressed_size</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1ab61145ba06bdae7c78b15e75b59cd522" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>_values</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1afa99a184d8582739b54c996898b43275" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>clear</name></member>
      <member refid="classthirdai_1_1compression_1_1_compressed_vector_1a95227a93560eaf18584e521ff5487d2a" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>CompressedVector</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a07e4576091e333d8f0220380f54980d8" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>decompress</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a078acfebfdabaab83387affbdadec5e2" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>DragonVector</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1ac3b2fb9bd0bfcc63930fdbe3d65480f1" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>DragonVector</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1aa2b2d5c3c8631d0450d6de0016cf3607" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>DragonVector</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1ad5e0995eccc401863c73e0af8fea9017" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>DragonVector</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1afb083dab98c90156d93cd2d11f6ce132" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>extend</name></member>
      <member refid="classthirdai_1_1compression_1_1_compressed_vector_1a2c7a0062270a52be9c870c4cce943a06" prot="public" virt="non-virtual" ambiguityscope="thirdai::compression::CompressedVector::"><scope>thirdai::compression::DragonVector</scope><name>extend</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1aa35283d3a1e0a761adf02cbc1306bdcf" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>get</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a7bded0ff8533fa56fffd75a31f1f00b7" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>indices</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a4058fdddb77e36547da0035f6e1510b2" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>seedForHashing</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1ad191c87658d8ac1af5f3997ce6bd5c0d" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>serialize</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1aaf6c8566080509b82fd898d9deebcad6" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>serialized_size</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1abd3b850a3deb279e31b792f68993df1b" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>set</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1acc434501e8421fcce5532a32ab4c72f8" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>size</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a9a6a7f291f180d389588f7994c4fa245" prot="private" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>sketch</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1aa5a962896c7f9fdd0dc45f3be963916d" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>type</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1ae304b188b419edebf59134b43ea15480" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>uncompressedSize</name></member>
      <member refid="classthirdai_1_1compression_1_1_dragon_vector_1a6b38a9eca7d278ea8c174bca792d723f" prot="public" virt="non-virtual"><scope>thirdai::compression::DragonVector</scope><name>values</name></member>
      <member refid="classthirdai_1_1compression_1_1_compressed_vector_1a61f99ea6ddcc088d132102af37e48a85" prot="public" virt="virtual"><scope>thirdai::compression::DragonVector</scope><name>~CompressedVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
