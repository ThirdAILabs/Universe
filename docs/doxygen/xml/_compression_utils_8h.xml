<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_compression_utils_8h" kind="file" language="C++">
    <compoundname>CompressionUtils.h</compoundname>
    <includes refid="_universal_hash_8h" local="no">hashing/src/UniversalHash.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">random</includes>
    <includes local="no">vector</includes>
    <includedby refid="_compressed_vector_8h" local="yes">compression/src/CompressedVector.h</includedby>
    <includedby refid="_compression_factory_8h" local="yes">compression/src/CompressionFactory.h</includedby>
    <includedby refid="_count_sketch_8h" local="yes">compression/src/CountSketch.h</includedby>
    <includedby refid="_dragon_vector_8h" local="yes">compression/src/DragonVector.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>compression/src/CompressionUtils.h</label>
        <link refid="_compression_utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hashing/src/UniversalHash.h</label>
        <link refid="_universal_hash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="3">
        <label>cereal/access.hpp</label>
      </node>
      <node id="4">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>random</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>compression/src/CompressedVector.h</label>
        <link refid="_compressed_vector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>compression/src/CompressionFactory.h</label>
        <link refid="_compression_factory_8h_source"/>
      </node>
      <node id="1">
        <label>compression/src/CompressionUtils.h</label>
        <link refid="_compression_utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>compression/src/CountSketch.h</label>
        <link refid="_count_sketch_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>compression/src/DragonVector.h</label>
        <link refid="_dragon_vector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacethirdai">thirdai</innernamespace>
    <innernamespace refid="namespacethirdai_1_1compression">thirdai::compression</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hashing/src/UniversalHash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">thirdai::compression<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Rather<sp/>than<sp/>getting<sp/>an<sp/>exact<sp/>threshold,<sp/>we<sp/>sample<sp/>a<sp/>number<sp/>of<sp/>points<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>values<sp/>array<sp/>and<sp/>gets<sp/>an<sp/>estimate<sp/>for<sp/>topk.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>If<sp/>threshold_ratio<sp/>=<sp/>0.1<sp/>=&gt;<sp/>estimateTopKThreshold<sp/>will<sp/>return<sp/>a<sp/>value<sp/>which</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>is<sp/>larger<sp/>than<sp/>90%<sp/>of<sp/>the<sp/>values.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>estimateTopKThreshold(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>values,<sp/>uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold_ratio,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>seed_for_sampling,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sample_population_size)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sample_population_size<sp/>is<sp/>the<sp/>total<sp/>number<sp/>of<sp/>random<sp/>samples<sp/>we<sp/>take<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>estimating<sp/>a<sp/>threshold<sp/>for<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>uint32_t<sp/>num_top_k<sp/>=</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sample_population_size<sp/>*<sp/>threshold_ratio);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>sampled_values(sample_population_size,<sp/>0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::mt19937<sp/>gen(seed_for_sampling);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>distribution(0,<sp/>size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sample_population_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>sampled_values[i]<sp/>=<sp/>std::abs(values[distribution(gen)]);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>Quickselect.<sp/>We<sp/>can<sp/>find<sp/>the<sp/>i&apos;th<sp/>largest<sp/>element<sp/>using</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>*<sp/>nth_element,<sp/>which<sp/>is<sp/>exactly<sp/>what<sp/>we<sp/>need<sp/>to<sp/>do<sp/>now.<sp/>Works<sp/>on<sp/>unsorted</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>*<sp/>arrays<sp/>too.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::nth_element(sampled_values.begin(),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampled_values.begin()<sp/>+<sp/>sample_population_size<sp/>-<sp/>num_top_k,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampled_values.end());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threshold<sp/>is<sp/>an<sp/>estimate<sp/>for<sp/>the<sp/>kth<sp/>largest<sp/>element<sp/>in<sp/>the<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>T<sp/>estimated_threshold<sp/>=<sp/>sampled_values[sample_population_size<sp/>-<sp/>num_top_k];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estimated_threshold;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>thirdai::compression</highlight></codeline>
    </programlisting>
    <location file="compression/src/CompressionUtils.h"/>
  </compounddef>
</doxygen>
